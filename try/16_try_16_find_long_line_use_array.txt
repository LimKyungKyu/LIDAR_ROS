// FLD //
// https://docs.opencv.org/4.1.2/df/d4c/classcv_1_1ximgproc_1_1FastLineDetector.html //

#include "ros/ros.h"
#include "sensor_msgs/LaserScan.h"
#include <math.h>
#include <opencv2/opencv.hpp>
#include "tf/transform_listener.h"
#include "project_ros_cpp/get_degree.h"
#define _USE_MATH_DEFINES
#include <cstdio>
#include <iostream>
#include <unistd.h>
#include <std_msgs/Float32.h>
#include <unistd.h>
#define RAD2DEG(x) ((x)*180.0/M_PI)

#include "opencv2/imgproc.hpp"
#include "opencv2/ximgproc.hpp"
// #include <opencv2/ximgproc/fast_line_detector.hpp>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui.hpp"


using namespace std;
using namespace cv;
using namespace cv::ximgproc;


// 맵 변수 선언 //
// 중심(10,10), 1m = 1px, 전체 맵 사이즈 20x20 //
// 50배 확대, 1m = 50px, 전체 맵 사이즈 1000x1000 //
#define assist_enlarge 50
Mat assist_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(0));
Mat accumulation_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(100));

Point2d assist_axis_x(assist_map.size().width/8,0);
Point2d assist_axis_y(0,assist_map.size().height/8);
Mat assist_re_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(0));

Mat draw_wall(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(100));
Mat draw_re_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(100));


Point2i assist_center;


// scan 데이터 저장공간 선언 //
Point2d assist_detection;

// IMU 변수 선언 //
float get_roll = 0.0;
float get_pitch = 0.0;
float get_yaw = 0.0;
float imu_time_check = 0.0;

// 드로잉 변수 선언 //
bool first_map_draw = true;
double check_percent = 0.0;
double limit_percent = 0.70;
double map_point_data[5000][2]; // 데이터를 좌표로 바꾼 공간
double imu_rot_point[5000][2]; // imu로 회전시킨 좌표
int m_a_count = 0;
int get_two_scan = 0;
float draw_yaw = 0.0;
float save_yaw = 0.0;

// IMU에서 각도를 받는 함수 //
void get_degree_from_imu(const project_ros_cpp::get_degree::ConstPtr& msg)
{
	// msg에서 data를 꺼낸다.
	// degree, 즉 0 ~ 360의 값을 준다.
	get_roll = msg->roll;
	get_pitch = msg->pitch;
	get_yaw = msg->yaw;
	imu_time_check = msg->imu_time_stamp; // 보낸 시점의 시간을 알아낸다.
	//printf("get degree : %f, %f, %f\n", get_roll, get_pitch, get_yaw);
	return;
}

// scan데이터와 IMU의 전송시점 비교를 위한 함수 //
double scan_time_check = 0.0;
void check_scan_stamp(const std_msgs::Float32::ConstPtr& msg)
{
	scan_time_check = msg->data;
	return;
}

// 포인트 회전을 위한 함수 //
Point2d point_rotation(Point2d a, float b)
{
	// float b 는 라디안이 입력되야한다.

	Point2d temp_a;

	temp_a.x = a.x*cos(b) - a.y*sin(b);
	temp_a.y = a.x*sin(b) + a.y*cos(b);

	//std::cout<<temp_a.x<<" "<<temp_a.y<< std::endl;
	return temp_a;
}

// Mat 이동 함수 //
// (2,1) 입력시 좌측 상단으로부터 +x -y 방향으로 2,1 움직이는것 확인함 //
// 즉 2행 1열을 미뤄준다. //
void mat_translation(Mat img, Mat dst, Point2i pt)
{
	// img를 pt만큼 이동시켜서 dst에 넣는다.
	Rect rect(Point(0,0), img.size()); // 0,0부터 img.size() 까지 그린다.
	for (int i=0; i<dst.rows; i++)
	{
		for (int j=0; j<dst.cols; j++)
		{
			Point2i dst_pt(j,i);
			Point2i img_pt = dst_pt - pt;
			if (rect.contains(img_pt))
				dst.at<uchar>(dst_pt) = img.at<uchar>(img_pt);
		}
	}

	return;
}

// Mat 데이터 일치 확인 함수 //
Point2i mat_percent(Mat original_mat, int total_point_count, vector<Point2d> find_pt)
{

	//cout << "check 3" << endl;
	int point_index = 0;
	int match_count = 0;
	double matching_percent[original_mat.cols*original_mat.rows];
	vector<Point2i> where_is_it;


	//cout << "total search point count : " << total_point_count << endl;
	//cout << "result check x,y" << endl;
	for (int i=0; i<original_mat.rows; i++) // 1행
	{
		for (int j=0; j<original_mat.cols; j++) // 1열부터 탐색한다.
		{
			if ( original_mat.at<uchar>(i, j) == 1 ) // 0,0이 255라면
			{
				for (int k=0; k<total_point_count; k++ ) // scan에서 찾아낸 점을 순회한다.
				{
					//cout << "row, col : " << i <<"," << j << endl;
					//cout << "access : " << int(i+find_pt[k].y) <<"," << int(j+find_pt[k].x) << endl;
					// (0,0) + (y,x)
					// x값은 열로 취급되고 y값은 행으로 취급된다.
					if ( int(i+find_pt[k].y)<0 ||
						int(i+find_pt[k].y)>original_mat.rows ||
						int(j+find_pt[k].x)<0 ||
						int(j+find_pt[k].x)>original_mat.cols)
					{
						//cout << "area out" << endl;
					}
					else
					{
						if ( original_mat.at<uchar>(int(i+find_pt[k].y), int(j+find_pt[k].x)) == 1 )
						{
							++match_count;
						}
					}
				}
				matching_percent[point_index] = double(match_count)/double(total_point_count);

				if ( matching_percent[point_index] > limit_percent )
				{
					//cout << "check 4" << endl;
					// 열을 좌표계로 따지면 x, 행을 좌표계로 따지면 y
					where_is_it.push_back(Point2i(j,i));
					//cout << "Index is : " << point_index << " x,y :" << where_is_it[point_index].x <<" "<< where_is_it[point_index].y << endl;
					++point_index;
					//cout << "check 5" << endl;
				}
				match_count = 0;
			}
		}
	}

	//cout << "check 6" << endl;
	// 만약 한개도 일치하는 점이 없으면 0,0을 반환한다.
	if ( point_index == 0 )
	{
		where_is_it.push_back(Point2i(0,0));
		check_percent = 0.0;
		return where_is_it[0];
	}
	else
	{
		// matching_percent, matching_percent+2의 경우 2개의 공간을 탐색하고 max 값이 2번째인 경우 1을 반환한다.
		// matching_percent, matching_percent+1000의 경우 1000개의 공간을 탐색하고 max 값이 2번째인경우 1을 반환한다.
		// 즉 반환된 인덱스가 저장된 인덱스이다.
		int xy_index = max_element(matching_percent, matching_percent+point_index)-matching_percent;

		
		/*
		cout << "result check percent" << endl;
		for ( int i=0; i<point_index; i++)
		{
			cout << matching_percent[i] <<endl;
		}
		cout << "this index is right? : " << xy_index << endl;
		cout << "this value is right? : " << matching_percent[xy_index] << endl;
		*/

		check_percent = matching_percent[xy_index];
		return where_is_it[xy_index];
	}
	
}


// 벽 찾는 함수 //
int length_threshold = 50;
float distance_threshold = 1.41421356;
// 1픽셀의 대각선 최대 이동거리(1.41421356) 이상이면 선으로 생각하지 않는다.
// 참고 : 최대거리 8m, tan 1도 일때 두점의 x,y 차이는 (0.00121843979,0.13961931133) 이다.
double canny_th1 = 1.0;
double canny_th2 = 1.0;
int canny_aperture_size = 5;
bool do_merge = false;
vector<double> wall_angle_list;
void find_wall(Mat find_mat)
{
	// Create FLD detector
	// Param               Default value   Description
	// length_threshold    10            - Segments shorter than this will be discarded
	// distance_threshold  1.41421356    - A point placed from a hypothesis line
	//                                     segment farther than this will be
	//                                     regarded as an outlier
	// canny_th1           50            - First threshold for
	//                                     hysteresis procedure in Canny()
	// canny_th2           50            - Second threshold for
	//                                     hysteresis procedure in Canny()
	// canny_aperture_size 3             - Aperturesize for the sobel
	//                                     operator in Canny()
	// do_merge            false         - If true, incremental merging of segments
	//                                     will be perfomred

	Ptr<FastLineDetector> fld = createFastLineDetector(length_threshold,
		distance_threshold, canny_th1, canny_th2, canny_aperture_size, do_merge);
	vector<Vec4f> lines_fld;

	// Because of some CPU's power strategy, it seems that the first running of
	// an algorithm takes much longer. So here we run the algorithm 10 times
	// to see the algorithm's processing time with sufficiently warmed-up
	// CPU performance.
	for(int run_count = 0; run_count < 10; run_count++)
	{
		double freq = getTickFrequency();
		lines_fld.clear();
		int64 start = getTickCount();
		// Detect the lines with FLD
		fld->detect(find_mat, lines_fld);
		double duration_ms = double(getTickCount() - start) * 1000 / freq;
		//std::cout << "Elapsed time for FLD " << duration_ms << " ms." << std::endl;
	}

	/*
	for (int i=0; i<lines_fld.size(); i++)
	{
		Vec4i v = lines_fld[i];
		//cout << "line " << int(i) << " : x1, y1 : " << v[0] <<"," << v[1] << endl;
		//cout << "line " << int(i) << " : x2, y2 : " << v[2] <<"," << v[3] << endl;
	}
	Mat line_image_fld(find_mat);
	fld->drawSegments(line_image_fld, lines_fld);
	*/

	if (lines_fld.size() == 0)
	{
		//printf("have no line\n");
	}	
	else
	{
		float distance_xy[2];
		Vec4f wall_point;
		for (int i=0; i<lines_fld.size(); i++)
		{
			wall_point = lines_fld[i];

			if ( wall_point[0] < wall_point[2] )
			{
				distance_xy[0] = wall_point[2]-wall_point[0];
				distance_xy[1] = wall_point[3]-wall_point[1];
			}
			else
			{
				distance_xy[0] = wall_point[0]-wall_point[2];
				distance_xy[1] = wall_point[1]-wall_point[3];
			}

			wall_angle_list.push_back(atan2(distance_xy[1], distance_xy[0]));
			line(draw_wall,	Point(wall_point[0],wall_point[1]), Point(wall_point[2],wall_point[3]), Scalar(255), 3);
			//printf("wall angle is : %f\n",wall_angle_list[i]*180.0/M_PI);
		}
		namedWindow("draw_wall_window", WINDOW_AUTOSIZE); // WINDOW_AUTOSIZE = 할당된 행렬에 딱 맞게 크기를 생성함, 크기조절 불가
		imshow("draw_wall_window", draw_wall);
		waitKey(1);
	}
}

// 맵 그리는 함수 //
void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)
{
	if( get_yaw == 0.0 )
	{
		printf("wait init (wait yaw) \n");
		sleep(0.1);
	}
	else
	{
		if ( get_two_scan<2 )
		{
			//printf("start well\n");
			int count = scan->ranges.size(); // ydlidar_node가 발행한 scan topic안의 range 수 확인

			for(int i=0; i < count; i++)
			{
				float degree = RAD2DEG(scan->angle_min + scan->angle_increment * i);
				// 해당하는 각도의 거리는 scan->ranges[i]; 이다.
				if( degree<180.0 && degree>-180.0 )
				{
					if( isinf(scan->ranges[i]) || scan->ranges[i]>8.0 || scan->ranges[i]<0.1 )
					{
					// ydlidar의 datasheet : 최소 0.1m, 최대 8m의 측정 보장. //
					// 무한대, 0.1m미만, 8m초과 값을 버린다. //
					}
					else
					{
						map_point_data[m_a_count][0] = (scan->ranges[i])*cos(degree*M_PI/180.0)*assist_enlarge;
						map_point_data[m_a_count][1] = -(scan->ranges[i])*sin(degree*M_PI/180.0)*assist_enlarge;
						imu_rot_point[m_a_count][0] = map_point_data[m_a_count][0]*cos(-get_yaw*(M_PI/180.0)) - map_point_data[m_a_count][1]*sin(-get_yaw*(M_PI/180.0));
						imu_rot_point[m_a_count][1] = map_point_data[m_a_count][0]*sin(-get_yaw*(M_PI/180.0)) + map_point_data[m_a_count][1]*cos(-get_yaw*(M_PI/180.0));
						circle(draw_wall,
							Point( int(assist_center.x+imu_rot_point[m_a_count][0]),
								int(assist_center.y+imu_rot_point[m_a_count][1]) ),
							3, Scalar(1), FILLED);

						++m_a_count;
					}
				}
			}
			namedWindow("draw_wall_window", WINDOW_AUTOSIZE); // WINDOW_AUTOSIZE = 할당된 행렬에 딱 맞게 크기를 생성함, 크기조절 불가
			imshow("draw_wall_window", draw_wall);
			waitKey(1);
			++get_two_scan;
		}
		else
		{
			if ( m_a_count == 0)
			{
				//printf("have no data\n");
				get_two_scan = 0;
			}
			else
			{
				if ( first_map_draw )
				{
					find_wall(draw_wall);
					if ( wall_angle_list.size() == 0 )
					{
						printf("wait init (wait wall angle)\n");
						wall_angle_list.clear();
						m_a_count = 0;
						get_two_scan = 0;
						assist_map = assist_re_map.clone();
						draw_wall = draw_re_map.clone();
					}
					else
					{
						Point2d rotation_xy;
						for(int i=0; i<m_a_count; i++)
						{
							rotation_xy.x = assist_center.x + (imu_rot_point[i][0]*cos(-wall_angle_list[0]) - imu_rot_point[i][1]*sin(-wall_angle_list[0]));
							rotation_xy.y = assist_center.y + (imu_rot_point[i][0]*sin(-wall_angle_list[0]) + imu_rot_point[i][1]*cos(-wall_angle_list[0]));
							line(assist_map, assist_center, rotation_xy, Scalar(1), 3);
						}
						save_yaw = wall_angle_list[0];

						namedWindow("assist_map_window", WINDOW_AUTOSIZE); // WINDOW_AUTOSIZE = 할당된 행렬에 딱 맞게 크기를 생성함, 크기조절 불가
						imshow("assist_map_window", assist_map);
						waitKey(1);

						wall_angle_list.clear();
						m_a_count = 0;
						get_two_scan = 0;
						accumulation_map = accumulation_map + assist_map;
						assist_map = assist_re_map.clone();
						draw_wall = draw_re_map.clone();
						first_map_draw=false;
					}
				}
				else
				{
					find_wall(draw_wall);
					double angle_change;
					for (int i=0; i<wall_angle_list.size(); i++)
					{
						angle_change = fabs(wall_angle_list[i]-save_yaw);
						angle_change = angle_change*180.0/M_PI;
						if ( angle_change > 3.0 )
						{
							//printf("use next degree\n");
						}
						else
						{
							printf("Success !!!\n");
							Point2d rotation_xy;
							for(int j=0; j<m_a_count; j++)
							{
								rotation_xy.x = assist_center.x + (imu_rot_point[j][0]*cos(-wall_angle_list[i]) - imu_rot_point[j][1]*sin(-wall_angle_list[i]));
								rotation_xy.y = assist_center.y + (imu_rot_point[j][0]*sin(-wall_angle_list[i]) + imu_rot_point[j][1]*cos(-wall_angle_list[i]));
								line(assist_map, assist_center, rotation_xy, Scalar(1), 3);
							}

							namedWindow("assist_map_window", WINDOW_AUTOSIZE); // WINDOW_AUTOSIZE = 할당된 행렬에 딱 맞게 크기를 생성함, 크기조절 불가
							imshow("assist_map_window", accumulation_map);
							waitKey(1);
						}
					}

					wall_angle_list.clear();
					m_a_count = 0;
					get_two_scan = 0;
					accumulation_map = accumulation_map + assist_map;
					assist_map = assist_re_map.clone();
					draw_wall = draw_re_map.clone();
				}
			}
		}
	}
}

int main(int argc, char **argv)
{
	if ( assist_map.size().width%2 )
	{
		// 3x3 행렬 생성시 0,0 부터 2,2 : center는 1,1이지만 int값으로 픽셀에 접근하기 때문에 1.5,1.5는 2,2가 된다. 따라서 -1을 해준다.
		assist_center.x = (assist_map.size().width/2)-1;
		assist_center.y = (assist_map.size().height/2)-1;
	}
	else
	{
		// 4x4 행렬 생성시 0,0 부터 3,3 : 짝수의 경우 중심을 정할 수 없다. 따라서 center를 2,2라고 간주한다.
		assist_center.x = (assist_map.size().width/2); // 500
		assist_center.y = (assist_map.size().height/2); // 500
	}

	ros::init(argc, argv, "draw_map_node"); // ROS 통신을 위한 노드 선언
	ros::NodeHandle n; // 노드 핸들러 선언

	ros::Subscriber imu_sub = n.subscribe("project_degree", 1, get_degree_from_imu);
	// degree_publisher.py에서 보내지는 project_degree 토픽을 읽어서 get_degree_from_imu함수를 실행한다.

	ros::Subscriber ydlidar_sub = n.subscribe<sensor_msgs::LaserScan>("/scan", 1, scanCallback);
	// ydlidar_node에서 보내지는 /scan 토픽을 읽어서 scanCallback함수를 실행한다. //
	
	ros::Subscriber scan_time_sub = n.subscribe("scan_pub_time_for_imu", 1, check_scan_stamp);
	// ydlidar의 scan값과 imu의 동기화를 위해서 함수를 실행한다.

	ros::spin();
	// spin에 의해서 위의 두 노드가 While처럼 무한 루프로 토픽이 들어올때마다 함수를 실행한다. //

	return 0;
}

// 허프변환 3채널
// LSD 1채널 사용시도 -> 라이센스문제
// FSD로 대체
