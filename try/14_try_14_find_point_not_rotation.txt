// 맵 1번 그리고 이전맵과 ORB, SIFT, SURF로 비교하여 특징점 추출하기 //
// 카토그래퍼에서 완전 분리됨 //
// ORB 예제 : https://github.com/gilbutITbook/006939/blob/master/ch14/matching/main.cpp //

#include "ros/ros.h"
#include "sensor_msgs/LaserScan.h"
#include <math.h>
#include <opencv2/opencv.hpp>
#include "tf/transform_listener.h"
#include "project_ros_cpp/get_degree.h"
#define _USE_MATH_DEFINES
#include <cstdio>
#include <iostream>
#include <unistd.h>
#include <std_msgs/Float32.h>
#define RAD2DEG(x) ((x)*180.0/M_PI)

using namespace cv;
using namespace std;

// 맵 변수 선언 //
// 중심(10,10), 1m = 1px, 전체 맵 사이즈 20x20 //
// 50배 확대, 1m = 50px, 전체 맵 사이즈 1000x1000 //
#define assist_enlarge 50
Mat assist_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(0));
Mat assist_re_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(0));
Mat accumulation_map(20*assist_enlarge, 20*assist_enlarge, CV_8UC1, Scalar(100));
Point2i assist_center;
Mat assist_temp;

// 좌표축 드로잉 변수 선언 //
Point2d assist_axis_x(assist_map.size().width/8,0);
Point2d assist_axis_y(0,assist_map.size().height/8);

// scan 데이터 저장공간 선언 //
Point2d assist_detection;

// IMU 변수 선언 //
float get_roll = 0.0;
float get_pitch = 0.0;
float get_yaw = 0.0;
float imu_time_check = 0.0;

// 드로잉 변수 선언 //
bool first_map_draw = true;
double check_percent = 0.0;
double limit_percent = 0.70;

// IMU에서 각도를 받는 함수 //
void get_degree_from_imu(const project_ros_cpp::get_degree::ConstPtr& msg)
{
	// msg에서 data를 꺼낸다.
	// degree, 즉 0 ~ 360의 값을 준다.
	get_roll = msg->roll;
	get_pitch = msg->pitch;
	get_yaw = msg->yaw;
	imu_time_check = msg->imu_time_stamp; // 보낸 시점의 시간을 알아낸다.
	//printf("get degree : %f, %f, %f\n", get_roll, get_pitch, get_yaw);
}

// scan데이터와 IMU의 전송시점 비교를 위한 함수 //
double scan_time_check = 0.0;
void check_scan_stamp(const std_msgs::Float32::ConstPtr& msg)
{
	scan_time_check = msg->data;
}

// 포인트 회전을 위한 함수 //
Point2d point_rotation(Point2d a, float b)
{
	// float b 는 라디안이 입력되야한다.

	Point2d temp_a;

	temp_a.x = a.x*cos(b) - a.y*sin(b);
	temp_a.y = a.x*sin(b) + a.y*cos(b);

	//std::cout<<temp_a.x<<" "<<temp_a.y<< std::endl;
	return temp_a;
}

// Mat 이동 함수 //
// (2,1) 입력시 좌측 상단으로부터 +x -y 방향으로 2,1 움직이는것 확인함 //
// 즉 2행 1열을 미뤄준다. //
void mat_translation(Mat img, Mat dst, Point2i pt)
{
	// img를 pt만큼 이동시켜서 dst에 넣는다.
	Rect rect(Point(0,0), img.size()); // 0,0부터 img.size() 까지 그린다.
	for (int i=0; i<dst.rows; i++)
	{
		for (int j=0; j<dst.cols; j++)
		{
			Point2i dst_pt(j,i);
			Point2i img_pt = dst_pt - pt;
			if (rect.contains(img_pt))
				dst.at<uchar>(dst_pt) = img.at<uchar>(img_pt);
		}
	}
}

// Mat 데이터 일치 확인 함수 //
Point2i mat_percent(Mat original_mat, int total_point_count, int find_pt[1000][2])
{
	int point_index = 0;
	double match_count = 0.0;
	double matching_percent[original_mat.cols*original_mat.rows];
	vector<Point> where_is_it;


	//cout << "total search point count : " << total_point_count << endl;
	//cout << "result check x,y" << endl;
	for (int i=0; i<original_mat.rows; i++) // 1행
	{
		for (int j=0; j<original_mat.cols; j++) // 1열부터 탐색한다.
		{
			if ( original_mat.at<uchar>(i, j) == 1 ) // 0,0이 255라면
			{
				for (int k=0; k<total_point_count; k++ ) // scan에서 찾아낸 점을 순회한다.
				{
					// (0,0) + (y,x)
					// x값은 열로 취급되고 y값은 행으로 취급된다.
					if ( original_mat.at<uchar>(i+find_pt[k][1], j+find_pt[k][0]) == 1 )
					{
						++match_count;
					}
				}
				matching_percent[point_index] = match_count/(double)total_point_count;

				if ( matching_percent[point_index] > limit_percent )
				{
					// 열을 좌표계로 따지면 x, 행을 좌표계로 따지면 y
					where_is_it.push_back(Point2i(j,i));
					//cout << "Index is : " << point_index << " x,y :" << where_is_it[point_index].x <<" "<< where_is_it[point_index].y << endl;
					++point_index;
				}

				match_count = 0.0;
			}
		}
	}

	// 만약 한개도 일치하는 점이 없으면 0,0을 반환한다.
	if ( point_index == 0 )
	{
		where_is_it.push_back(Point2i(0,0));
		check_percent = 0.0;
		return where_is_it[0];
	}
	else
	{
		// matching_percent, matching_percent+2의 경우 2개의 공간을 탐색하고 max 값이 2번째인 경우 1을 반환한다.
		// matching_percent, matching_percent+1000의 경우 1000개의 공간을 탐색하고 max 값이 2번째인경우 1을 반환한다.
		// 즉 반환된 인덱스가 저장된 인덱스이다.
		int xy_index = max_element(matching_percent, matching_percent+point_index)-matching_percent;

		
		/*
		cout << "result check percent" << endl;
		for ( int i=0; i<point_index; i++)
		{
			cout << matching_percent[i] <<endl;
		}
		cout << "this index is right? : " << xy_index << endl;
		cout << "this value is right? : " << matching_percent[xy_index] << endl;
		*/

		check_percent = matching_percent[xy_index];
		return where_is_it[xy_index];
	}
	
}

// scan 데이터로 mat에 그릴때 255가 찍힌 좌표와 중심으로부터의 각을 저장한다.
// 축적된 Mat의 모든 점에서 if 조건을 수행하여 해당 각도의 최대 255를 구한다.
// 일치하는지 비교한다. 적절한 확률을 구한다.

// 맵 그리는 함수 //
void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)
{
	if( get_yaw == 0.0 )
	{
		printf("wait init\n");
		sleep(0.1);
	}
	else
	{
		//printf("start well\n");

		int count = scan->ranges.size(); // ydlidar_node가 발행한 scan topic안의 range 수 확인
		double my_array[1000][2]; // 유효한 데이터를 저장할 공간
		int point_detection[1000][2]; // 데이터를 좌표로 바꾼 공간
		int m_a_count = 0; // 유효값이 몇개인지 카운트

		for(int i = 0; i < count; i++)
		{
			float degree = RAD2DEG(scan->angle_min + scan->angle_increment * i);

			if( degree<180.0 && degree>-180.0 )
			{
				if( isinf(scan->ranges[i]) || scan->ranges[i]>8.0 || scan->ranges[i]<0.1 )
				{
				// ydlidar의 datasheet : 최소 0.1m, 최대 8m의 측정 보장. //
				// 무한대, 0.1m미만, 8m초과 값을 버린다. //
				}
				else
				{
					my_array[m_a_count][0] = degree;
					my_array[m_a_count][1] = scan->ranges[i];

					// openCV로 line을 생성하기 위한 좌표를 계산하고 확대 시킨다. //
					point_detection[m_a_count][0] = my_array[m_a_count][1]*cos(my_array[m_a_count][0]*M_PI/180.0)*assist_enlarge; // x좌표
					point_detection[m_a_count][1] = -my_array[m_a_count][1]*sin(my_array[m_a_count][0]*M_PI/180.0)*assist_enlarge; // y 좌표

					// assist_map에 assist_center로 부터 detection까지 흰색으로(255), 굵기 5
					line(assist_map,
						assist_center,
						Point(assist_center.x+point_detection[m_a_count][0],
							assist_center.y+point_detection[m_a_count][1]),
						Scalar(1), 5);
					++m_a_count;
				}
			}
		}

		if ( m_a_count == 0 )
		{
			printf("no scan data\n");
		}
		else
		{
			if ( first_map_draw )
			{
				//cout << "check 1" << endl;
				accumulation_map = accumulation_map + assist_map;
			}
			else
			{
				//cout << "check 2" << endl;
				Point2i matching_point = mat_percent(assist_temp, m_a_count, point_detection);

				if ( check_percent > limit_percent )
				{
					cout << "match point is : " << matching_point << endl;
					Mat temp_mat;
					mat_translation(assist_map, temp_mat, Point2i( matching_point.x - assist_center.x, matching_point.y - assist_center.y ) );
					accumulation_map = accumulation_map + temp_mat;
				}
			}
			assist_temp = assist_map.clone();
			assist_map = assist_re_map.clone();
			namedWindow("map_window", WINDOW_AUTOSIZE); // WINDOW_AUTOSIZE = 할당된 행렬에 딱 맞게 크기를 생성함, 크기조절 불가
			imshow("map_window", accumulation_map);
			waitKey(1);
			first_map_draw=false;
			//printf("did well\n");
		}
		
	}

}

int main(int argc, char **argv)
{
	if ( assist_map.size().width%2 )
	{
		// 3x3 행렬 생성시 0,0 부터 2,2 : center는 1,1이지만 int값으로 픽셀에 접근하기 때문에 1.5,1.5는 2,2가 된다. 따라서 -1을 해준다.
		assist_center.x = (assist_map.size().width/2)-1;
		assist_center.y = (assist_map.size().height/2)-1;
	}
	else
	{
		// 4x4 행렬 생성시 0,0 부터 3,3 : 짝수의 경우 중심을 정할 수 없다. 따라서 center를 2,2라고 간주한다.
		assist_center.x = (assist_map.size().width/2); // 500
		assist_center.y = (assist_map.size().height/2); // 500
	}

	ros::init(argc, argv, "draw_map_node"); // ROS 통신을 위한 노드 선언
	ros::NodeHandle n; // 노드 핸들러 선언

	ros::Subscriber imu_sub = n.subscribe("project_degree", 1, get_degree_from_imu);
	// degree_publisher.py에서 보내지는 project_degree 토픽을 읽어서 get_degree_from_imu함수를 실행한다.

	ros::Subscriber ydlidar_sub = n.subscribe<sensor_msgs::LaserScan>("/scan", 1, scanCallback);
	// ydlidar_node에서 보내지는 /scan 토픽을 읽어서 scanCallback함수를 실행한다. //
	
	ros::Subscriber scan_time_sub = n.subscribe("scan_pub_time_for_imu", 1, check_scan_stamp);
	// ydlidar의 scan값과 imu의 동기화를 위해서 함수를 실행한다.

	ros::spin();
	// spin에 의해서 위의 두 노드가 While처럼 무한 루프로 토픽이 들어올때마다 함수를 실행한다. //

	return 0;
}
