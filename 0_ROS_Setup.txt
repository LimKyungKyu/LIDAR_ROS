////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ROS란?
robot operating system : 로봇용 공개소스 메타 운영체제입니다.
http://wiki.ros.org/ko/ROS/Introduction
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 1. 설치  //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1-1. ROS - Melodic 설치
http://wiki.ros.org/melodic/Installation/Ubuntu

pc가 packages.ros.org로부터 ROS관련 소프트웨어를 받을 수 있도록 설정
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

다운로드 받는 패키지가 신뢰 할 수 있다는 것을 확인하기 위해 key값을 설정
sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

sudo apt-get update
sudo apt-get install -y liblua5.2-dev libgflags-dev libsuitesparse-dev libgoogle-glog-dev
sudo apt install ros-melodic-desktop-full
	오류나는경우
	sudo apt-get --fix-broken install
sudo rosdep init
rosdep update
	rosdep은 ROS 구동에 필요한 요소를 쉽게 설치하도록 돕는다

echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
source ~/.bashrc
	이렇게 echo를 사용해 bashrc에 추가하면 터미널이 켜질때마다 /opt/ros/melodic/setup.bash를 수행한다.
	지금 켠 터미널에만 한번 적용하고, 그 터미널을 껐다가 다시 켰을때는 영향을 안주려면
	echo를 쓰지말고 바로 source /opt/ros/melodic/setup.bash 하면 된다. # Tag2 #
	여기선 echo로 추가해놓는것을 권장한다.
	나중에 cd && sudo vi .bashrc의 맨아랫줄로 가서 echo로 추가한 내용을 지우면 원상태로 돌아온다.

sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential
	의존성 패키지 설치 오류가 발생하면 필요 모듈을 아래에서 다운로드 하고 위 명령어를 다시 수행한다.
	http://repos.ros.org/repos/ros_bootstrap/pool/main/p/python-rospkg-modules/
	sudo dpkg -i --force-overwrite python-rospkg-modules_1.1.10-1_all.deb

참고 : 헤더파일 위치 : cd /opt/ros/melodic/include
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1-2. Cartographer ROS 설치
https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html

sudo apt-get install -y python-wstool python-rosdep ninja-build
mkdir Google_Cartographer && cd Google_Cartographer && wstool init src #Tag1#
wstool merge -t src https://raw.githubusercontent.com/googlecartographer/cartographer_ros/master/cartographer_ros.rosinstall
wstool update -t src
src/cartographer/scripts/install_proto3.sh
sudo rosdep init
	Cartographer ROS를 사용해야 하는데 위에서 설치하느라 sudo rosdep init했기때문에 아래와 같은 에러가 나온다.
	The command ‘sudo rosdep init’ will print an error if you have already executed it since installing ROS. This error can be ignored.
	해당 위치로 이동해서 파일을 삭제하고 다시 sudo rosdep init한다.
	sudo rm -rf /etc/ros/rosdep/sources.list.d/20-default.list && sudo rosdep init
rosdep update
	오류시 : sudo rosdep fix-permissions 입력하고 다시 rosdep update
cd ~/Google_Cartographer && sudo rosdep install --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} -y
	오류시 : #Tag1# 으로 돌아가서 src 폴더 지우고  wstool init src 부터 다시한다.
catkin_make_isolated --install --use-ninja
	일반적인 catkin_make와 다르게 catkin_make_isolated로 설치한다.

source devel_isolated/setup.bash
echo "source ~/Google_Cartographer/devel_isolated/setup.bash" >> ~/.bashrc
source ~/.bashrc
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 2. 예제 // 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-1. 설치 확인을 위한 터틀심 예제
roscore # 터미널 1 #
rosrun turtlesim turtlesim_node # 터미널 2 #
rosrun turtlesim turtle_teleop_key # 터미널 3 #
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-2. Google_Cartographer + YDLIDAR X2 켜보기

cd && mkdir -p carto_with_yd/src && cd carto_with_yd/src
git clone https://github.com/YDLIDAR/ydlidar_ros.git
cd ydlidar_ros && git checkout X2
	ydlidar_ros 폴더로 이동후 X2 제품에 해당하는 X2 브랜치로 이동하는 git 명령어
cd && cd carto_with_yd && catkin_make

source devel/setup.bash
echo "source ~/carto_with_yd/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc
	source ~/.bashrc는 터미널을 재부팅하지 않아도 .bashrc 파일을 갱신 시켜 현재 터미널에서 사용 가능하게 만든다.
	예제를 따라하다 보면 여러개의 ROS를 사용하는 경우 echo가 여러번 입력되서 setup.bash가 현재 필요한 ROS로 설정되지 않았을 수 있다.
	cd && sudo vi .bashrc 입력해서 가장 마지막줄에 현재 사용할 setup, 즉 source ~/carto_with_yd/devel/setup.bash 가 있는지 확인한다. # Tag2 #

cd && cd carto_with_yd/src
git clone https://github.com/msadowski/x2_cartographer.git
git submodule update --init

sudo rosdep install --from-paths src --ignore-src --rosdistro melodic -r -y
	모든 의존성 패키지를 포함시키는 명령어이다.
	현재 ~/carto_with_yd/src안에 cartographer가 없고 ~/Google_Cartographer에 깔려있으니까 이 폴더를 활용하려고 위명령어를 입력한다.

roscd ydlidar/startup
sudo chmod 0777 *
sudo sh initenv.sh
	/dev 폴더에 ydlidar를 만들어주는 작업이다.
	위 3줄의 명령어 입력 후에 LIDAR 와 Jetson tx2의 usb를 연결하고, LIDAR가 돌아가면 빼고 다시 usb를 연결한다.

roslaunch carto_mapper mapper.launch # 터미널 1 #
rosrun ydlidar ydlidar_client # 터미널 2 #
RViz 켜지면 좌측 하단의 ADD클릭
Map 추가 Topic - /map 클릭
LaserScan 추가  Topic - /scan 클릭

~/carto_with_yd/src/x2_cartographer/carto_mapper/config/x2.lua
TRAJECTORY_BUILDER_2D.min_range = 0.1 // 최소 감지 거리
TRAJECTORY_BUILDER_2D.max_range = 10 // 최대 감지 거리
	x2.lua의 설정은 수정후 catkin_make 필요없다.

~/carto_with_yd/src/ydlidar_ros/src/ydlidar_client.cpp
if(degree > -180 && degree< 180) // -180도 ~ 180도 안에 있는 정보를 표시해준다.
	수정 후 catkin_make 필요하다.
	cd && cd carto_with_yd && catkin_make

~/carto_with_yd/src/ydlidar_ros/src/ydlidar_node.cpp
	드라이버와 같다고 보면 된다. scan에 대한 중요 정보가 들어있다.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-3. YDLIDAR에서 제공하는 예제로 터미널에 출력하기
YDLIDAR X2
공식홈페이지 : http://www.ydlidar.com/download
예제 링크 : https://github.com/YDLIDAR/ydlidar_ros
	위의 Google_Cartographer에서 src에 포함시킨 ydlidar_ros와 동일하다.
	공식 홈페이지 - X2 - Ros 다운로드 -YDLIDAR ROS Manual도 참고한다.

cd && mkdir -p ~/YDLIDAR/src && cd ~/YDLIDAR/src
	예제를 실행할 폴더인 YDLIDAR와 소스폴더인 src를 만들고 src폴더 내부로 이동한다.

catkin_init_workspace
	catkin 명령어를 사용해서 YDLIDAR 폴더안에 있는 src폴더 내부를 Workspace로 지정한다.

cd ~/YDLIDAR && catkin_make
	src폴더 밖에서 catkin 명령어를 사용해 환경을 빌드한다.
	catkin은 ROS의 빌드 시스템이다.
	ROS빌드 시스템은 기본적으로 CMake(Cross Platform Make)를 이용한다.
	CMake를 ROS에 맞도록 수정한 빌드 환경이 catkin이다.
	빌드 환경은 CMakeLists.txt를 수정하여 구성한다.

echo "source ~/YDLIDAR/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc
	현재 만든 Workspace를 터미널이 켜질때마다 등록한다.
	설명은 # Tag2 #, # Tag2 #를 참고한다.
	간단한 예로
	echo "source ~/YDLIDAR/devel/setup.bash" >> ~/.bashrc 를 했다면 roscd ydlidar시 ~/YDLIDAR로 이동하고
	안했다면 2-2에서 설정한 echo "source ~/carto_with_yd/devel/setup.bash" >> ~/.bashrc 때문에 ~/carto_with_yd 폴더로 이동하게 된다.
	
YDLIDAR의 공식 예제를 git에서 clone한다.
cd ~/YDLIDAR/src && git clone https://github.com/YDLIDAR/ydlidar_ros
cd ~/YDLIDAR/src/ydlidar_ros
git checkout X2
cd ~/YDLIDAR && catkin_make
	catkin_make명령어를 통해 파일을 생성한다.

roscd ydlidar/startup
sudo chmod 0777 *
sudo sh initenv.sh
	/dev 폴더에 ydlidar를 만들어주는 작업이다.
	위 3줄의 명령어 입력 후에 LIDAR 와 Jetson tx2의 usb를 연결하고
	LIDAR가 돌아가는게 확인 되면 usb를 뽑고 다시 usb를 연결한다.

## 터미널로 값 출력해보기 ##
roscore # 터미널 1 #
roslaunch ydlidar lidar.launch # 터미널 2 #
rosrun ydlidar ydlidar_client # 터미널 3 #

## rviz로 시각화 ##
모든 터미널을 종료한다.
roslaunch ydlidar lidar_view.launch 
	.launch 파일은 여러개의 노드를 실행시켜준다.

## 사용된 명령어 정리 ##
roscore : ROS Master를 실행하는 명령어. 같은 네트워크라면 다른 컴퓨터에서 실행가능.
단 멀티 ROS코어를 지원하는 특수한 경우를 제외하고, ROS코어는 동일 네트워크에서 하나만 구동하게 되어있음
Master : 노드와 노드 사이의 연결 및 메시지 통신을 위한 네임 서버, 마스터가 없으면 ROS노드간 메시지, 토픽등의 통신을 할 수 없다.
node : 최소 단위의 ROS 실행 프로세서, ROS에서는 하나의 기능을 하나의 노드에 구현하도록 권장함.
rosrun : ROS의 기본적인 실행 명령어, 패키지에서 하나의 노드를 실행하는데 사용된다.
roslaunch : 한번에 복수개의 노드를 실행하는 명령어
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-4. Google에서 녹화해놓은 카토그래퍼 예제 불러오기 (딱히 안해봐도 됨)

source install_isolated/setup.bash
wget -P ~/Downloads https://storage.googleapis.com/cartographer-public-data/bags/backpack_2d/cartographer_paper_deutsches_museum.bag
roslaunch cartographer_ros demo_backpack_2d.launch bag_filename:=${HOME}/Downloads/cartographer_paper_deutsches_museum.bag
위치 : cd ~/catkin_ws/src/cartographer_ros/cartographer_ros/launch
실행시 라이더의 수평각도가 변하면 안된다.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-5. waveshare, 게임패드로 Jetson nano 움직이는 예제

You need to prepare an SD card which should be at least 64G 
User Etcher software to write image (unzip above) to SD card.

젯봇에서 나노를 분리 시킨다.
건전지만 먼저 충전한다.
충전이 완료되면 충전기의 전원을 반드시 뽑는다.

아직 합체하지 말고 나노의 전원 입력 커넥터(미니 usb, 휴대폰 충전단자)로 먼저 킨다.
나노의 초기 아이디, 비밀번호 : jetbot
와이파이를 연결하고 나노의 전원을 끈다.
나노 전원 입력 커넥터(미니 usb, 휴대폰 충전단자)를 반드시 분리한다.

젯봇을 만든다.
젯봇의 스위치를 ON으로 만들어서 나노를 킨다.
OLED에 IP주소가 나온다.

젯봇의 Public IP를 획득하여
공유기에서 포트 포워딩 시킨다.
내부아이피주소 입력, 외부포트 8282
내부포트 8888
이제 http://<젯봇의 Public IP>:8282 이렇게 접속 가능하다.

# 기본 젯봇 움직이기 #
~/Notebooks/basic_motion/
basic_motion.ipynb

# 원격 조종 예제 #
~/Notebooks/teleoperation/
teleoperation.ipynb
Connect USB adapter to PC

게임패드 설정
1. PC/PS3/Andorid mode (초기값)
2. XBox 360 mode. 
예제는 XBox 360모드로 진행한다.
홈 버튼을 7초동안 누른다.
left joystick is mapped to axes[0] and axes[1]
right joystick is mapped to axes[2] and axes[3]

# 학습된 충돌방지 예제 #
1. 벽에 대한 데이터 수집
~/Notebooks/collision_avoidance/
data_collection.ipynb	
2. 학습 ( Neural network 사용 )
tain_model.ipynb
3. 실행
live_demo.ipynb

# 오브젝트 트래킹 #
~/Notebooks/object_following/ 폴더에 아래의 미리 학습된 자료 다운로드
https://drive.google.com/file/d/1RnNBHPDphIOWwHCSfeMCWQ7XN3w3tKFD/view
( 충돌 방지로도 잘 학습된 자료이다. )
live_demo.ipynb

# 라인 트래킹 #
~/Notebooks/road_following/
data-collection.ipynb
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
