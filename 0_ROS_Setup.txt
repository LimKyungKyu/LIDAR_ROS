RIDAR_Install

	ROS란?
	robot operating system : 로봇용 공개소스 메타 운영체제입니다.
	http://wiki.ros.org/ko/ROS/Introduction

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	ROS - Melodic 설치
	http://wiki.ros.org/melodic/Installation/Ubuntu
	sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
		pc가 packages.ros.org로부터 ROS관련 소프트웨어를 받을 수 있도록 설정
	sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
		다운로드 받는 패키지가 신뢰 할 수 있다는 것을 확인하기 위해 key값을 설정
	sudo apt-get update
	sudo apt-get install -y liblua5.2-dev libgflags-dev libsuitesparse-dev libgoogle-glog-dev
	sudo apt install ros-melodic-desktop-full
		오류나는경우 sudo apt-get --fix-broken install
	sudo rosdep init
	rosdep update
	rosdep은 ROS 구동에 필요한 요소들을 쉽게 설치할 수 있도록 합니다.
	echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
	source ~/.bashrc
	sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential
		의존성 패키지 설치 오류시
		필요 모듈 아래 링크에서 다운로드
		http://repos.ros.org/repos/ros_bootstrap/pool/main/p/python-rospkg-modules/
		sudo dpkg -i --force-overwrite python-rospkg-modules_1.1.10-1_all.deb
		sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Cartographer ROS 설치
	https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html
	sudo apt-get install -y python-wstool python-rosdep ninja-build
	mkdir catkin_ws && cd catkin_ws && wstool init src #Tag1#
	wstool merge -t src https://raw.githubusercontent.com/googlecartographer/cartographer_ros/master/cartographer_ros.rosinstall
	wstool update -t src
	src/cartographer/scripts/install_proto3.sh
	sudo rosdep init
		이미 ROS를 sudo rosdep init 명령어로 실행한적이 있으면 아래와 같은 에러가 출력되므로 무시해도 된다.  
		The command ‘sudo rosdep init’ will print an error if you have already executed it since installing ROS. This error can be ignored.
	rosdep update
	오류시 : sudo rosdep fix-permissions 입력하고 다시 rosdep update
	cd ~/catkin_ws && sudo rosdep install --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} -y
		오류시 : #Tag1# 으로 돌아가서 src 폴더 지우고  wstool init src 부터 다시한다.
		catkin_make_isolated --install --use-ninja
	참고 : 헤더파일 위치 : cd /opt/ros/melodic/include

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	예제
	YDLIDAR에서 제공하는 예제 1 (터미널에서 측정 값 출력하기)
	YDLIDAR X2
		공식홈페이지 : http://www.ydlidar.com/download
		예제 링크 : https://github.com/YDLIDAR/ydlidar_ros
		공식 홈페이지 - X2 - Ros 다운로드 -YDLIDAR ROS Manual
	ROS Workspace를 만든다.
	mkdir -p ~/Melodic/src && cd ~/Melodic/src
	catkin_init_workspace (작업공간을 만드는 명령어)
	cd ~/Melodic && catkin_make (빌드 명령어)
		catkin 명령어 : catkin은 ROS의 빌드 시스템이다.
		ROS빌드 시스템은 기본적으로 CMake(Cross Platform Make)를 이용하고 있다.
		패키지 폴더에 CMakeList.txt 의 파일에 빌드 환경을 기술하고 있음.
		ROS에서는 CMake를 ROS에 맞도록 수정하여 ROS에 특화된 catkin 빌드 환경을 만들어놨다.
		catkin 빌드 시스템은 ROS와 관련된 빌드, 패키지 관리, 패키지간의 의존 관계 등을 편리하게 사용할 수 있다.
	catkin 환경변수 추가
	echo "source ~/Melodic/devel/setup.bash" >> ~/.bashrc
	source ~/.bashrc
	YDLIDAR의 공식 레포지토리를 clone
	cd ~/Melodic/src && git clone https://github.com/YDLIDAR/ydlidar_ros
	cd ~/Melodic/src/ydlidar_ros
	git checkout X2
		ydlidar_ros 폴더로 이동후 X2 제품에 해당하는 X2 브랜치로 이동.
		git 버전관리와 관련된 것으로 X2에 해당하는 버전인 X2로 설정시 이에 맞춰 레포지토리의 내용들이 모두 바뀜
	ydlidar_node와 ydlidar_client 컴파일 및 생성
	cd ~/Melodic && catkin_make
	ydlidar의 시리얼 포트 alias로 /dev/ydlidar를 만들어줌
	roscd ydlidar/startup
	sudo chmod 0777 *
	sudo sh initenv.sh
	(초기 환경설정 스크립트 실행, 스크립트 실행 후 lidar와 jetson을 연결한 usb포트를 한번 빼고 다시 연결 할 것)

	터미널에서 측정 값 출력해보기
	roscore 입력
	roslaunch ydlidar lidar.launch 입력
	rosrun ydlidar ydlidar_client 입력
	lidar_node와 lidar_client의 소스코드 위치 ~/Melodic/src/ydlidar_ros/src

	rviz로 시각화
	roscore 입력 ( 위에서 켜놨으면 재실행하지 않아도 된다. )
	roslaunch ydlidar lidar_view.launch

	사용된 명령어 정리
	roscore
	ROS 마스터를 실행하는 명령어.
	같은 네트워크라면 다른 컴퓨터에서 실행가능.
	단 멀티 ROS코어를 지원하는 특수한 경우를 제외하고는 ROS코어는 동일 네트워크에서 하나만 구동되게 되어있음
	node
	ROS에서 최소 단위의 실행 프로세서
	ROS에서는 하나의 기능을 하나의 노드에 구현하도록 권장함.
	Master
	노드와 노드 사이의 연결 및 메시지 통신을 위한 네임 서버
	마스터가 없으면 ROS노드간 메시지, 토픽등의 통신을 할 수 없다.
	roslaunch
	한번에 복수개의 노드를 실행하는 명령어
	rosrun
	ROS의 기본적인 실행 명령어입니다.
	패키지에서 하나의 노드를 실행하는데 사용됩니다.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        비슷한 GITHUB 예제 1
	cd && mkdir test && cd test && mkdir src && cd src
	git clone https://github.com/msadowski/x2_cartographer.git
	git clone https://github.com/YDLIDAR/ydlidar_ros.git
	cd ydlidar_ros && git checkout X2
	cd && cd test  && catkin_make
	sudo rosdep install --from-paths src --ignore-src --rosdistro melodic -r -y
	source devel/setup.bash
	echo "source ~/test/devel/setup.bash" >> ~/.bashrc
	source ~/.bashrc
	roscd ydlidar/startup
	sudo chmod 0777 *
	sudo sh initenv.sh
	LIDAR 와 Jetson tx2의 usb를 연결한다.
	roscore
	터미널 하나 더 키고 : roslaunch carto_mapper mapper.launch
	RViz 켜지면 좌측 하단의 ADD클릭
	Map 클릭 - Topic /map으로 선택
	필요하면 orientation도 켜둔다.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Google에서 제공하는 카토그래퍼 예제 1
	source install_isolated/setup.bash
	wget -P ~/Downloads https://storage.googleapis.com/cartographer-public-data/bags/backpack_2d/cartographer_paper_deutsches_museum.bag
	roslaunch cartographer_ros demo_backpack_2d.launch bag_filename:=${HOME}/Downloads/cartographer_paper_deutsches_museum.bag
	위치 : cd ~/catkin_ws/src/cartographer_ros/cartographer_ros/launch
	실행시 라이더의 수평각도가 변하면 안된다.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	직접 패키지와 노드 만들어서 메세지 주고받는 예제 1
	https://cafe.naver.com/openrt/3043
	cd && mkdir test_package && cd test_package && mkdir src && cd src
	이때 src는 비워져있어야한다. 다른 예제(카토그래퍼 등..) 있으면 안됨
	catkin_create_pkg my_package std_msgs roscpp
		my_package를 만들고 의존하는 패키지로 std_msgs와 roscpp를 추가한다는 뜻
		로스의 표준 메시지 패키지인 std_msgs
		c/c++을 사용하기 위하여 클라이언트 라이브러리 roscpp
		catkin_create_pkg my_package 만 입력해서 패키지 생성 후 package.xml 에서 직접 입력하여도 된다.
	cd my_package 해서 생성된 폴더들을 살펴본다.
		include : 인클루드 폴더
		src : 소스코드 폴더
		CMakeLists.txt : 빌드 설정 파일
		package.xml : 패키지 설정 파일

	패키지를 만들기 위한 수정사항

	1. vi package.xml
		비슷한 내용이 담긴 위치에 아래 내용을 추가한다.
#######################################################################################################
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>
#######################################################################################################

	2. vi CMakeList.txt
		find_package를 아래 와 같이 수정한다.
#######################################################################################################
find_package(catkin REQUIRED COMPONENTS roscpp std_msgs message_generation)
#######################################################################################################
		catkin_package 위에 아래 내용을 추가한다.
#######################################################################################################
add_message_files(FILES msgTutorial.msg)
generate_messages(DEPENDENCIES std_msgs)
add_executable(my_msg_publisher src/my_msg_publisher.cpp)
target_link_libraries(my_msg_publisher ${catkin_LIBRARIES})
add_dependencies(my_msg_publisher my_package_generate_messages_cpp)
add_executable(my_msg_subscriber src/my_msg_subscriber.cpp)
target_link_libraries(my_msg_subscriber ${catkin_LIBRARIES})
add_dependencies(my_msg_subscriber my_package_generate_messages_cpp)
#######################################################################################################
		catkin_package의 주석을 아래와 같이 해제한다.
#######################################################################################################
catkin_package
(
	#INCLUDE_DIRS include
	LIBRARIES oroca_ros_tutorials
	CATKIN_DEPENDS roscpp std_msgs
	#DEPENDS system_lib
)
#######################################################################################################
		include_directories의 내용을 다음과 같이 수정한다.
#######################################################################################################
include_directories(include ${catkin_INCLUDE_DIRS})
//include : include 폴더이다. 코딩중 필요한 헤더를 이 폴더에 넣는다.
//${catkin_INCLUDE_DIRS} : ROS 기본 헤더 경로
#######################################################################################################

	3. 위의 vi CMakeList.txt에서 넣은
	add_message_files(FILES msgTutorial.msg) 옵션은
	노드에서 사용할 메시지인 msgTutorial.msg를 빌드할때 포함하란 뜻이다.
	msgTutorial.msg는 현재는 없으므로 생성해준다.
		cd ~/test_package/src/my_package
		mkdir msg && cd msg && vi msgTutorial.msg 하고 아래 내용 입력
		(헤더를 만들때 int32형으로 만든다는 뜻)
#######################################################################################################
int32 data
#######################################################################################################

	4. 위의 vi CMakeList.txt에서 넣은
	add_executable(my_msg_publisher src/my_msg_publisher.cpp) 옵션은
	my_msg_publisher.cpp를 빌드해서 my_msg_publisher를 만들라는 뜻이다.
	my_msg_publisher.cpp는 현재 없으므로 생성해준다.
		cd ~/test_package/src/my_package/src
		vi my_msg_publisher.cpp 하고 아래 내용 입력
#######################################################################################################
#include "ros/ros.h" // ROS 기본 헤더파일

// msgTutorial 메시지 파일 헤더 (빌드후 자동 생성됨)
// 이름은 CMakeLists.txt 에서 추가한 add_message_files(FILES msgTutorial.msg)과 같아야 한다.
#include "my_package/msgTutorial.h"

int main(int argc, char **argv) // 노드 메인 함수
{
	ros::init(argc, argv, "my_msg_publisher"); // 노드명 초기화
	ros::NodeHandle nh; // ROS 시스템과 통신을 위한 노드 핸들 선언

	// 발행자 선언, my_package 패키지의 msgTutorial 메시지 파일을 이용한 발행자 my_package_pub을 작성한다.
	// 토픽명은 "my_package_msg" 이며, 발행자 큐(queue) 사이즈를 100개로 설정한다는 것이다
	ros::Publisher my_package_pub = nh.advertise<my_package::msgTutorial>("my_package_msg", 100);

	// 루프 주기를 설정한다. "10" 이라는 것은 10Hz를 말하는 것으로 0.1초 간격으로 반복된다.
	ros::Rate loop_rate(1); // 1Hz = 1초
	int count = 0; // 메시지에 사용될 변수 선언
	while (ros::ok())
	{
		my_package::msgTutorial msg; // msgTutorial 메시지 파일 형식으로 msg 라는 메시지를 선언
		msg.data = count; // count 라는 변수를 이용하여 메시지 값을 정한다.
		ROS_INFO("send msg = %d", count); // ROS_INFO 라는 ROS 함수를 이용하여 count 변수를 표시한다.
		my_package_pub.publish(msg); // 메시지를 발행한다. 위에서 설정한 1Hz 간격으로 발행된다.
		loop_rate.sleep(); // 위에서 정한 루프 주기에 따라 슬립에 들어간다.
		++count; // count 변수 1씩 증가
	}

	return 0;
}
#######################################################################################################

	5. add_executable(my_msg_subscriber src/my_msg_subscriber.cpp) 도 마찬가지로 생성해준다.
		vi my_msg_subscriber.cpp 하고 아래 내용 입력
#######################################################################################################
#include "ros/ros.h" // ROS 기본 헤더파일

// msgTutorial 메시지 파일 헤더 (빌드후 자동 생성됨)
// 이름은 CMakeLists.txt 에서 추가한 add_message_files(FILES msgTutorial.msg)과 같아야 한다.
#include "my_package/msgTutorial.h"

// 메시지 콜백함수로써, 밑에서 설정한 my_package_sub 구독자에 해당되는 메시지를
// 수신하였을때 동작하는 함수이다.
// 입력 메시지로는 my_package 패키지의 msgTutorial 메시지를 받도록 되어있다.
void msgCallback(const my_package::msgTutorial::ConstPtr& msg)
{
	ROS_INFO("recieve msg: %d", msg->data); // 수신된 메시지를 표시하는 함수
}
int main(int argc, char **argv) // 노드 메인 함수
{
	ros::init(argc, argv, "my_msg_subscriber"); // 노드명 초기화
	ros::NodeHandle nh; // ROS 시스템과 통신을 위한 노드 핸들 선언

	// 구독자 선언, my_package 패키지의 msgTutorial 메시지 파일을 이용한
	// 구독자 my_package_sub 를 작성한다. 토픽명은 "my_package_msg" 이며
	// 구독자 큐(queue) 사이즈를 100개로 설정한다는 뜻이다.
	ros::Subscriber my_package_sub = nh.subscribe("my_package_msg", 100, msgCallback);

	ros::spin(); // 콜백함수 호출을 위한 함수로써, 메시지가 수신되기를 대기, 수신되었을 경우 콜백함수를 실행한다.
	return 0;
}
#######################################################################################################

	노드를 생성한다
	sudo rosdep init
		sudo rosdep init
		다른 ROS를 실행했었으면 init파일이 존재한다.
		지우고 다시 rosdep init해준다.
		sudo rm -rf /etc/ros/rosdep/sources.list.d/20-default.list
		sudo rosdep init
	rosdep update
	cd ~/test_package && catkin_make
	roscore
	rosrun my_package my_msg_publisher
	rosrun my_package my_msg_subscriber

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        터틀봇 예제 1
	roscore
	rosrun turtlesim turtlesim_node
	rosrun turtlesim turtle_teleop_key

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        터틀봇을 게임패드로 움직이는 예제 1

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	참고
	직접 코딩
	https://github.com/yangfuyuan/ydlidar_sdk
	한글강의
	https://github.com/robotpilot/ros-seminar
	영어 튜토리얼
	http://wiki.ros.org/ROS/Tutorials
	WaveShae 예제
	https://www.waveshare.com/wiki/JetBot_AI_Kit
	네이버 한글 강좌 (오로카)
	https://cafe.naver.com/openrt/2360
