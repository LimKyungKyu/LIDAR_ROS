// 1. IMU Publish //
############################################################################################################################

1. LSM303DLHC
http://www.devicemart.co.kr/goods/view?no=1177212
https://github.com/adafruit/Adafruit_CircuitPython_LSM303_Accel
https://github.com/adafruit/Adafruit_CircuitPython_LSM303DLH_Mag
sudo python3 -m pip install adafruit-circuitpython-lsm303dlh-mag
sudo python3 -m pip install adafruit-circuitpython-lsm303_accel

2. i2c 찾는방법
sudo i2cdetect -y -r 0
sudo i2cdetect -y -r 1

각도를 주고받을 .msg 파일 생성
cd && cd Project_ROS_nano/src/project_ros_python/msg && vi get_degree.msg
float32 roll
float32 pitch
float32 yaw
float32 imu_time_stamp

토픽명 : project_degree

# 참고사항 #
import board를 하게되면

elif board_id == ap_board.JETSON_NANO:
    from adafruit_blinka.board.jetson_nano import * 가 불린다.

adafruit_blinka.board.jetson_nano를 열어보면 아래와 같은 코드가 적혀있다.
SDA = pin.SDA_1
SCL = pin.SCL_1
SDA_1 = pin.SDA
SCL_1 = pin.SCL 
그런데 from adafruit_blinka.microcontroller.tegra.t210 import pin 를 이용한 코드다.

adafruit_blinka.microcontroller.tegra.t210 import pin을 열어보면 아래처럼 설정되어있다.
SDA = Pin('GEN1_I2C_SDA')
SCL = Pin('GEN1_I2C_SCL')
SDA_1 = Pin('GEN2_I2C_SDA')
SCL_1 = Pin('GEN2_I2C_SCL')

따라서 adafruit_blinka.board.jetson_nano의 코드는 다음과 같다.
SDA = pin.SDA_1 = Pin('GEN2_I2C_SDA')
SCL = pin.SCL_1 = Pin('GEN2_I2C_SCL')
SDA_1 = pin.SDA = Pin('GEN1_I2C_SDA')
SCL_1 = pin.SCL = Pin('GEN1_I2C_SCL')


sudo i2cdetect -y -r 0
SDA 0, SCL 0번을 검색하면 27,28번이 잡힌다.
27, 28번의 이름은 GEN2_I2C_SDA, GEN2_I2C_SCL 이다.
https://www.jetsonhacks.com/nvidia-jetson-nano-j41-header-pinout/
https://docs.google.com/spreadsheets/d/1LsgtB-vEs6yJQ9URbp_P2XIVghCy400udUMC0MHWm5w/edit#gid=1812645714


이제 import busio의 I2C클래스를 살펴본다.
adafruit_blinka의 Lockable 클래스로 Pin('GEN2_I2C_SCL'), Pin('GEN2_I2C_SDA')가 들어간다.
Lockable 클래스가 진행되고 __init__을 거쳐 init 으로 들어갔다가 
elif detector.board.any_embedded_linux: 에 의해서
from adafruit_blinka.microcontroller.generic_linux.i2c import I2C as _I2C 클래스를 해놓는다.

from microcontroller.pin import i2cPorts 에 의해서 portId를 받게되는데
from microcontroller.pin의 
elif chip_id == ap_chip.T210:
    from adafruit_blinka.microcontroller.tegra.t210.pin import * 로 빠지게 되고
SDA = Pin('GEN1_I2C_SDA')
SCL = Pin('GEN1_I2C_SCL')
SDA_1 = Pin('GEN2_I2C_SDA')
SCL_1 = Pin('GEN2_I2C_SCL')
와
i2cPorts = (
    (0, SCL, SDA), (1, SCL_1, SDA_1),
)
를 확인하게 된다.

for portId, portScl, portSda in i2cPorts: 에 의해서 
portId, portScl, portSda에 (0, SCL, SDA)가 처음에 담기게 된다.
이때 SCL 과 SDA가 꼬여서 if scl == portScl and sda == portSda:로 들어가지 못한다.

scl = Pin('GEN2_I2C_SCL'), sda = Pin('GEN2_I2C_SDA') 인 상태에서
portId가 0이면 (0, SCL, SDA) 가 아니라 (0, SCL_1, SDA_1) 이상태가 되야하는데 위에서 i2cPorts는 다르게 적혀있다.

따라서 self._i2c = _I2C(portId, mode=_I2C.MASTER, baudrate=frequency) 의
portId를 0으로 바꿔주던지
i2c = busio.I2C(board.SCL_1, board.SDA_1) 이렇게 사용하면 된다.

3. roll pitch yaw 계산
https://gist.github.com/shoebahmedadeel/0d8ca4eaa65664492cf1db2ab3a9e572

cd && cd Project_ROS_nano/src/project_ros_python/src && vi degree_publisher.py
///////////////////////////////////////////////////////////////////////////////
#!/usr/bin/python3

import rospy
import math
import time
import board
import busio
import adafruit_lsm303dlh_mag
import adafruit_lsm303_accel

from project_ros_python.msg import get_degree
MY_PI = 3.14159265358979323846

i2c = busio.I2C(board.SCL_1, board.SDA_1)
mag_sensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)
acc_sensor = adafruit_lsm303_accel.LSM303_Accel(i2c)

def get_from_raw():

	for_pub = get_degree()

	while not rospy.is_shutdown():

		roll = 0.0
		pitch = 0.0
		yaw = 0.0

		mean_count = 0
		do_number = 300
		while ( mean_count < do_number ):
			mag_x, mag_y, mag_z = mag_sensor.magnetic
			acc_x, acc_y, acc_z = acc_sensor.acceleration
			#print('Magnetometer (gauss): ({0:10.3f}, {1:10.3f}, {2:10.3f})'.format(mag_x, mag_y, mag_z))
			#print('Acceleration (m/s^2): ({0:10.3f}, {1:10.3f}, {2:10.3f})'.format(acc_x, acc_y, acc_z))

			roll = roll + math.atan2(-acc_x, math.sqrt(acc_y*acc_y + acc_z*acc_z))
			pitch = pitch + math.atan2(acc_y, math.sqrt(acc_x*acc_x + acc_z*acc_z))
			new_mag_x = mag_x*math.cos(pitch) + mag_y*math.sin(roll)*math.sin(pitch) + mag_z*math.cos(roll)*math.sin(pitch)
			new_mag_y = mag_y*math.cos(roll) - mag_z*math.sin(roll)
			yaw = yaw + math.atan2(mag_y, mag_x)
			mean_count += 1

		yaw = yaw*180.0/MY_PI/do_number
		roll = roll*180.0/MY_PI
		pitch = pitch*180.0/MY_PI

		for_pub.yaw = float(yaw)
		for_pub.imu_time_stamp = float(time.clock_gettime(time.CLOCK_MONOTONIC)) # mean : 0.2sec
		pub.publish(for_pub)

		print('yaw : %f' % yaw)


if __name__=='__main__':
	try:
		rospy.init_node('project_degree_node', anonymous=True)
		pub = rospy.Publisher('project_degree', get_degree, queue_size=1)
		get_from_raw()

	except rospy.ROSInterruptException:
		pass


///////////////////////////////////////////////////////////////////////////////
권한이 없으면 추가한다.
vi /etc/passwd : jetbot의 1000을 0으로 수정
vi /etc/group : root:x:0: root,jetbot 으로 수정
vi /etc/sudoers : jetbot ALL=(ALL:ALL) ALL 으로 수정



