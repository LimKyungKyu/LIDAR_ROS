// 1. tf 예제 따라하기 //
########################################################################################################################
tf_echo를 활용하여 turtle1의 위치 정보와, 각도를 터미널로 추출하기 

cd && mkdir -p test_tf/src && cd test_tf/src && catkin_init_workspace
catkin_create_pkg learning_tf tf roscpp rospy turtlesim
// tf, roscpp, rospy, turtlesim의 의존성을 포함시켜 패키지를 생성한다.
cd && cd test_tf && catkin_make && echo "source ~/test_tf/devel/setup.bash" >> ~/.bashrc && source ~/.bashrc

참고 : https://raw.githubusercontent.com/ros/geometry_tutorials/hydro-devel/turtle_tf/src/turtle_tf_broadcaster.cpp
cd ~/test_tf/src/learning_tf/src && vi turtle_tf_broadcaster.cpp
////////////////////////////////////////////////////////////////
#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <turtlesim/Pose.h>

std::string turtle_name;

void poseCallback(const turtlesim::PoseConstPtr& msg)
{

  static tf::TransformBroadcaster br;

  tf::Transform transform;
  transform.setOrigin( tf::Vector3(msg->x, msg->y, 0.0) );
  // 2차원 좌표를 msg에서 받고
  // Vector3를 활용해서 z를 0.0으로 추가해서 3차원 좌표계로 setOrigin을 사용해 transform안에 저장한다.

  tf::Quaternion q;
  q.setRPY(0, 0, msg->theta);
  transform.setRotation(q);
  // Quaternion를 활용해 z축에 대한 각도를 q에 담고 setRotation을 사용해 transform안에 저장한다.

  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "world", turtle_name));
  // world에 대한 설명
  // https://answers.ros.org/question/12910/about-world-frame/
  // turtle_name을 ros::Time::now()시점에
  // parent frame인 world에
  // transform좌표값에 위치한다고 전달한다.
}
int main(int argc, char** argv)
{
  ros::init(argc, argv, "my_tf_broadcaster"); // my_tf_broadcaster라는 노드를 생성한다.

  if (argc != 2){ROS_ERROR("need turtle name as argument"); return -1;};
  turtle_name = argv[1];
  // turtle_tf_broadcaster.cpp이 실행될때 argv[1]을 turtle_name으로 받는다.
  // start_demo.launch파일을 살펴보면 turtle1_tf_broadcaster의 argv[1]은 turtle1이다.

  ros::NodeHandle node;
  ros::Subscriber sub = node.subscribe(turtle_name+"/pose", 10, &poseCallback);

  ros::spin();
  return 0;
};
////////////////////////////////////////////////////////////////
cd ~/test_tf/src/learning_tf && vi CMakeLists.txt
맨 아래 두줄 추가
add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)
target_link_libraries(turtle_tf_broadcaster ${catkin_LIBRARIES})
////////////////////////////////////////////////////////////////
cd ~/test_tf && catkin_make
////////////////////////////////////////////////////////////////
cd ~/test_tf/devel/lib/learning_tf && vi start_demo.launch
  <launch>

    <!-- Turtlesim Node-->
    <node pkg="turtlesim" type="turtlesim_node" name="sim"/>
    <node pkg="turtlesim" type="turtle_teleop_key" name="teleop" output="screen"/>

    <!-- Axes -->
    <param name="scale_linear" value="2" type="double"/>
    <param name="scale_angular" value="2" type="double"/>

    <node pkg="learning_tf" type="turtle_tf_broadcaster"
          args="/turtle1" name="turtle1_tf_broadcaster" />
    <node pkg="learning_tf" type="turtle_tf_broadcaster"
          args="/turtle2" name="turtle2_tf_broadcaster" />

  </launch>
////////////////////////////////////////////////////////////////
turtlesim_node는 여러가지 cpp를 활용해서 만들어져있다.
https://answers.ros.org/question/214020/where-is-turtlesim_node-inside-the-turtlesim-package/
https://github.com/ros/ros_tutorials/blob/jade-devel/turtlesim/CMakeLists.txt#L25
set(turtlesim_node_SRCS
 src/turtlesim.cpp
 src/turtle.cpp
 src/turtle_frame.cpp)
set(turtlesim_node_HDRS
 include/turtlesim/turtle_frame.h)
turtle_teleop_key는 turtle_teleop_key.cpp로 만들었다.
http://docs.ros.org/melodic/api/turtlesim/html/teleop__turtle__key_8cpp_source.html
////////////////////////////////////////////////////////////////
roslaunch learning_tf start_demo.launch // 터틀봇이 한개만 표시된다.
rosrun tf tf_echo /world /turtle1 // turtle1의 위치 정보와 각도가 표시된다.
########################################################################################################################





// 2. turtle2가 turtle1을 따라가도록 만들기 //
########################################################################################################################
참고 : https://raw.githubusercontent.com/ros/geometry_tutorials/groovy-devel/turtle_tf/src/turtle_tf_listener.cpp
cd ~/test_tf/src/learning_tf/src && vi turtle_tf_listener.cpp
//////////////////////////////////////////////////////////////
#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
#include <turtlesim/Spawn.h>

int main(int argc, char** argv){
  ros::init(argc, argv, "my_tf_listener");

  ros::NodeHandle node; // ROS 시스템과 통신을 위한 노드 핸들 선언

  ros::service::waitForService("spawn");
  ros::ServiceClient add_turtle = node.serviceClient<turtlesim::Spawn>("spawn");
  turtlesim::Spawn srv;
  add_turtle.call(srv);

  ros::Publisher turtle_vel = node.advertise<geometry_msgs::Twist>("turtle2/cmd_vel", 10);
  // 토픽명은 "turtle2/cmd_vel" 이며, Publisher 큐(queue) 사이즈를 10개로 설정한다는 것이다.

  tf::TransformListener listener;
  // TransformListener 오브젝트를 listener라는 이름으로 선언

  ros::Rate rate(10.0);

  while (node.ok())
  {

    tf::StampedTransform transform;

    try
    {
      listener.lookupTransform("/turtle2", "/turtle1", ros::Time(0), transform);
    }
    catch (tf::TransformException &ex)
    {
      ROS_ERROR("%s",ex.what());
      ros::Duration(1.0).sleep();
      continue;
    }

    geometry_msgs::Twist vel_msg;
    vel_msg.angular.z = 4.0 * atan2(transform.getOrigin().y(),
                                    transform.getOrigin().x());
    vel_msg.linear.x = 0.5 * sqrt(pow(transform.getOrigin().x(), 2) +
                                  pow(transform.getOrigin().y(), 2));

    turtle_vel.publish(vel_msg);

    rate.sleep();
  }
  return 0;
};
//////////////////////////////////////////////////////////////
cd ~/test_tf/src/learning_tf && vi CMakeLists.txt
맨 아랫줄에 아까 추가한 코드에 이어서 내용 추가
add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp) // 원래 있던 내용
add_executable(turtle_tf_listener src/turtle_tf_listener.cpp)
target_link_libraries(turtle_tf_broadcaster ${catkin_LIBRARIES}) // 원래 있던 내용
target_link_libraries(turtle_tf_listener ${catkin_LIBRARIES})

cd ~/test_tf && catkin_make
cd ~/test_tf/devel/lib/learning_tf && vi start_demo.launch
<launch> </launch> 사이에 아래 내용 추가
    <node pkg="learning_tf" type="turtle_tf_listener"
          name="listener" />

roslaunch learning_tf start_demo.launch
아래와 같은 오류가 발생할 수 있다.
    [ERROR] 1253915565.300572000: Frame id /turtle2 does not exist! When trying to transform between /turtle1 and /turtle2.
    [ERROR] 1253915565.401172000: Frame id /turtle2 does not exist! When trying to transform between /turtle1 and /turtle2.
이유는 다음과 같다.
This happens because our listener is trying to compute the transform before messages about turtle 2 have been received
because it takes a little time to spawn in turtlesim and start broadcasting a tf frame. 

rosrun tf tf_echo /world /turtle1 // 위치 정보와 각도가 표시된다.
rosrun tf tf_echo /world /turtle2 // 위치 정보와 각도가 표시된다.
########################################################################################################################





// 3. tf_echo를 사용해 좌표 출력 // 
########################################################################################################################
echo "source ~/carto_with_yd/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc
roslaunch carto_mapper mapper.launch
rosrun ydlidar ydlidar_client

Frame odom exists with parent map.
Frame base_footprint exists with parent odom.
Frame laser_frame exists with parent base_footprint.

cd ~/carto_with_yd/src/learning_tf && vi CMakeLists.txt 를 아래와 같이 수정
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  tf
)

roslaunch carto_mapper mapper.launch
rosrun tf tf_echo /odom /base_footprint
// 전원이 켜진 순간 base_footprint와 odom이 0,0으로 일치한다.
// 움직이면 base_footprint가 이동한다.
// 빨간색이 x, 초록색이 y, 파란색이 z
// 참고자료 http://docs.ros.org/melodic/api/tf/html/c++/tf__echo_8cpp_source.html
########################################################################################################################





// 4. cpp를 만들어 좌표 출력 // 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cd ~/carto_with_yd/src
catkin_create_pkg my_tf_test tf roscpp rospy
vi ~/carto_with_yd/src/my_tf_test/src/my_tf_test.cpp
########################################################################################################################
#include "ros/ros.h"
#include "tf/transform_listener.h"
#define _USE_MATH_DEFINES
#include <cstdio>

int main(int argc, char ** argv)
{
	ros::init(argc, argv, "my_tf_test", ros::init_options::AnonymousName);
	ros::NodeHandle nh;
	ros::Rate loop_rate(1);

	double my_RAD2DEG = 180.0/M_PI;

	// odom은 0,0이고 base_footprint까지의 거리가 부호를 가지며 표시된다.
	// 아래는 직접 필요한 Frame을 넣어준다.
	std::string start = std::string("/odom"); 
	std::string move = std::string("/base_footprint");

	// 첫번째 전송이 완료될때까지 1초동안 기다립니다.
	tf::TransformListener tfl;
	tfl.waitForTransform(start, move, ros::Time(), ros::Duration(1.0));

	while(nh.ok())
	{
		tf::StampedTransform my_test_transform;
		tfl.lookupTransform(start, move, ros::Time(), my_test_transform);

		double yaw, pitch, roll;
		my_test_transform.getBasis().getRPY(roll, pitch, yaw);
		tf::Quaternion q = my_test_transform.getRotation();
		tf::Vector3 Coordinate_3D = my_test_transform.getOrigin();

		std::cout<<"시작 점으로 부터 현재 위치 [metric] (x, y, z)"<<std::endl;
		std::cout<<"	("<<Coordinate_3D.getX()<<", "<<Coordinate_3D.getY()<<", "<<Coordinate_3D.getZ()<<")"<<std::endl;
		std::cout<<"축 회전 각 [degree] (roll, pitch, yaw)"<<std::endl;
		std::cout<<"	("<<roll*my_RAD2DEG<<", "<<pitch*my_RAD2DEG<<", "<<yaw*my_RAD2DEG<<")"<< std::endl;
		loop_rate.sleep();
	}

	return 0;
}
########################################################################################################################
cd ~/carto_with_yd/src/my_tf_test && vi CMakeLists.txt
맨아래에 아래 코드 추가
add_executable(my_tf_test src/my_tf_test.cpp)
target_link_libraries(my_tf_test ${catkin_LIBRARIES})

cd ~/carto_with_yd && catkin_make
roslaunch carto_mapper mapper.launch
rosrun my_tf_test my_tf_test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
