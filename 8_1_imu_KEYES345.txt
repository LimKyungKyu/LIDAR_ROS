// IMU //

// Accelerometer를 활용해서 roll, pitch를 정확하게 계산한 사이트
http://students.iitk.ac.in/roboclub/2017/12/21/Beginners-Guide-to-IMU.html
// 참고 : http://wizmoz.blogspot.com/2013/01/simple-accelerometer-data-conversion-to.html?_sm_au_=iVVrPJjs44Sjbntq

// Accelerometer로 구하는 yaw값이 정확하지 않은 이유
http://mythinkg.blogspot.com/2014/03/mpu-6050-rollpitch.html
https://stackoverflow.com/questions/11089967/how-to-obtain-only-linear-acceleration-from-accelerometer-using-gyroscope

// magnetometer가 있는경우 참고할 자료
https://pinkwink.kr/1072 

// imu - ros 토픽 연결 // 
https://github.com/SiChiTong/autonomous_bicycle/blob/master/src/sensor_imu_publisher.py#L59
https://github.com/SiChiTong/autonomous_bicycle/blob/master/scripts/imu_to_angles.py
두개를 참고해서 만든다.

// rviz - imu 시각화 //
http://wiki.ros.org/rviz_imu_plugin?distro=melodic

// 참고 // 
https://www.robotshop.com/community/robots/show/autonomous-navigation-mecanum-wheel-robot# // 로봇 만들음
https://github.com/ranbo0311/Mecanum_robot?utm_source=rb-community&utm_medium=robots&utm_campaign=autonomous-navigation-mecanum-wheel-robot // 로봇 만든거 깃허브
http://wiki.ros.org/imu_filter_madgwick // imu 연동
https://answers.ros.org/question/246256/how-to-visualize-imu-data-in-rviz/ // imu 설정시 오류가 나는가에 대한 고찰
http://wiki.ros.org/rviz_imu_plugin // ROS rviz imu 패키지 
https://github.com/googlecartographer/cartographer_ros/issues/985 // imu 참고 사이트
https://mechaworld.tistory.com/11 // 참고, 외발 로봇
https://m.blog.naver.com/yuninjae1234/220935189584 // 보정





// 1. KEYES-345 Accelerometer로 각도 구하기 //
sudo apt-get install git build-essential python3-dev python-dev
cd && mkdir temp_adxl345 && cd temp_adxl345
git clone https://github.com/adafruit/Adafruit_Python_ADXL345.git
cd Adafruit_Python_ADXL345
sudo python3 setup.py install
python3 -m pip install adafruit-adxl345
python3 -m pip install smbus
https://github.com/Seeed-Studio/Grove_Starter_Kit_for_BBG/blob/master/grove_accelerometer_16g/adxl345.py
###############################################################################################################################
#!/usr/bin/python3

import smbus
import time
import math

bus = smbus.SMBus(1)

# ADXL345 device address
ADXL345_DEVICE = 0x53

# ADXL345 constants
EARTH_GRAVITY_MS2   = 9.80665
SCALE_MULTIPLIER    = 0.004

DATA_FORMAT         = 0x31
BW_RATE             = 0x2C
POWER_CTL           = 0x2D

BW_RATE_1600HZ      = 0x0F
BW_RATE_800HZ       = 0x0E
BW_RATE_400HZ       = 0x0D
BW_RATE_200HZ       = 0x0C
BW_RATE_100HZ       = 0x0B
BW_RATE_50HZ        = 0x0A
BW_RATE_25HZ        = 0x09

RANGE_2G            = 0x00
RANGE_4G            = 0x01
RANGE_8G            = 0x02
RANGE_16G           = 0x03

MEASURE             = 0x08
AXES_DATA           = 0x32

class ADXL345:

	address = None

	def __init__(self, address = ADXL345_DEVICE):        
		self.address = address
		self.setBandwidthRate(BW_RATE_100HZ)
		self.setRange(RANGE_2G)
		self.enableMeasurement()

	def enableMeasurement(self):
		bus.write_byte_data(self.address, POWER_CTL, MEASURE)

	def setBandwidthRate(self, rate_flag):
		bus.write_byte_data(self.address, BW_RATE, rate_flag)

    # set the measurement range for 10-bit readings
	def setRange(self, range_flag):
		value = bus.read_byte_data(self.address, DATA_FORMAT)

		value &= ~0x0F;
		value |= range_flag;  
		value |= 0x08;

		bus.write_byte_data(self.address, DATA_FORMAT, value)
    
    # returns the current reading from the sensor for each axis
    #
    # parameter gforce:
    #    False (default): result is returned in m/s^2
    #    True           : result is returned in gs
	def getAxes(self, gforce = False):
		bytes = bus.read_i2c_block_data(self.address, AXES_DATA, 6)
		
		x = bytes[0] | (bytes[1] << 8)
		if(x & (1 << 16 - 1)):
			x = x - (1<<16)

		y = bytes[2] | (bytes[3] << 8)
		if(y & (1 << 16 - 1)):
			y = y - (1<<16)

		z = bytes[4] | (bytes[5] << 8)
		if(z & (1 << 16 - 1)):
			z = z - (1<<16)

		x = x * SCALE_MULTIPLIER 
		y = y * SCALE_MULTIPLIER
		z = z * SCALE_MULTIPLIER

		if gforce == False:
			x = x * EARTH_GRAVITY_MS2
			y = y * EARTH_GRAVITY_MS2
			z = z * EARTH_GRAVITY_MS2

		x = round(x, 4)
		y = round(y, 4)
		z = round(z, 4)

		return {"x": x, "y": y, "z": z}

if __name__ == "__main__":
	# if run directly we'll just create an instance of the class and output 
	# the current readings
	adxl345 = ADXL345()
	M_PI = 3.14159265358979323846

	while True:
		axes = adxl345.getAxes(True)
		print ("ADXL345 on address 0x%x:" % (adxl345.address))
		print ("   x = %.3fG" % ( axes['x'] ))
		print ("   y = %.3fG" % ( axes['y'] ))
		print ("   z = %.3fG" % ( axes['z'] ))
		time.sleep(1)

		RawX = axes['x'];
		RawY = axes['y'];
		RawZ = axes['z'];

		x = RawX * (  (2 * EARTH_GRAVITY_MS2) / 512);
		y = RawY * (  (2 * EARTH_GRAVITY_MS2) / 512);
		z = RawZ * (  (2 * EARTH_GRAVITY_MS2) / 512);

		roll = (math.atan2(y, math.sqrt(x*x + z*z))*180.0)/M_PI;
		pitch = (math.atan2(x, math.sqrt(y*y + z*z))*180.0)/M_PI;
		print ("roll:%.3f, pitch:%.3f" % (roll,pitch))
		
###############################################################################################################################





// 2. KEYES-345(IMU) + 카토그래퍼 try_1 (정석) // 
###############################################################################################################################
#!/usr/bin/python
import smbus
import time
import math
import numpy
import rospy
from geometry_msgs.msg import Quaternion, Twist
from tf.broadcaster import TransformBroadcaster
from sensor_msgs.msg import Imu

bus = smbus.SMBus(1)
# i2c 번호 = 1 #

# ADXL345 device address
ADXL345_DEVICE = 0x53

# ADXL345 constants
EARTH_GRAVITY_MS2   = 9.80665
SCALE_MULTIPLIER    = 0.004

DATA_FORMAT         = 0x31
BW_RATE             = 0x2C
POWER_CTL           = 0x2D

BW_RATE_1600HZ      = 0x0F
BW_RATE_800HZ       = 0x0E
BW_RATE_400HZ       = 0x0D
BW_RATE_200HZ       = 0x0C
BW_RATE_100HZ       = 0x0B
BW_RATE_50HZ        = 0x0A
BW_RATE_25HZ        = 0x09

RANGE_2G            = 0x00
RANGE_4G            = 0x01
RANGE_8G            = 0x02
RANGE_16G           = 0x03

MEASURE             = 0x08
AXES_DATA           = 0x32

MY_PI = 3.14159265358979323846

class ADXL345:

	address = None

	def __init__(self, address = ADXL345_DEVICE):        
		self.address = address
		self.setBandwidthRate(BW_RATE_100HZ)
		self.setRange(RANGE_2G)
		self.enableMeasurement()

	def enableMeasurement(self):
		bus.write_byte_data(self.address, POWER_CTL, MEASURE)

	def setBandwidthRate(self, rate_flag):
		bus.write_byte_data(self.address, BW_RATE, rate_flag)

	def setRange(self, range_flag):
		value = bus.read_byte_data(self.address, DATA_FORMAT)
		value &= ~0x0F;
		value |= range_flag;  
		value |= 0x08;
		bus.write_byte_data(self.address, DATA_FORMAT, value)





    # returns the current reading from the sensor for each axis
    # parameter gforce:
    #    False (default): result is returned in m/s^2
    #    True           : result is returned in gs 
	def getAxes(self, gforce = False):
		bytes = bus.read_i2c_block_data(self.address, AXES_DATA, 6)

		x = bytes[0] | (bytes[1] << 8)
		if(x & (1 << 16 - 1)):
			x = x - (1<<16)

		y = bytes[2] | (bytes[3] << 8)
		if(y & (1 << 16 - 1)):
			y = y - (1<<16)

		z = bytes[4] | (bytes[5] << 8)
		if(z & (1 << 16 - 1)):
			z = z - (1<<16)

		x = x * SCALE_MULTIPLIER 
		y = y * SCALE_MULTIPLIER
		z = z * SCALE_MULTIPLIER

		if gforce == False:
			x = x * EARTH_GRAVITY_MS2
			y = y * EARTH_GRAVITY_MS2
			z = z * EARTH_GRAVITY_MS2

		x = round(x, 4)
		y = round(y, 4)
		z = round(z, 4)

		return {"x": x, "y": y, "z": z}

def quaternion_from_euler(ai, aj, ak, axes='sxyz'):
	"""Return quaternion from Euler angles and axis sequence.
	ai, aj, ak : Euler's roll, pitch and yaw angles
	axes : One of 24 axis sequences as string or encoded tuple

	Source: ROS tf transformations
	https://github.com/ros/geometry        
	"""
	# axis sequences for Euler angles
	_NEXT_AXIS = [1, 2, 0, 1]

	# map axes strings to/from tuples of inner axis, parity, repetition, frame
	_AXES2TUPLE = {
	    'sxyz': (0, 0, 0, 0), 'sxyx': (0, 0, 1, 0), 'sxzy': (0, 1, 0, 0),
	    'sxzx': (0, 1, 1, 0), 'syzx': (1, 0, 0, 0), 'syzy': (1, 0, 1, 0),
	    'syxz': (1, 1, 0, 0), 'syxy': (1, 1, 1, 0), 'szxy': (2, 0, 0, 0),
	    'szxz': (2, 0, 1, 0), 'szyx': (2, 1, 0, 0), 'szyz': (2, 1, 1, 0),
	    'rzyx': (0, 0, 0, 1), 'rxyx': (0, 0, 1, 1), 'ryzx': (0, 1, 0, 1),
	    'rxzx': (0, 1, 1, 1), 'rxzy': (1, 0, 0, 1), 'ryzy': (1, 0, 1, 1),
	    'rzxy': (1, 1, 0, 1), 'ryxy': (1, 1, 1, 1), 'ryxz': (2, 0, 0, 1),
	    'rzxz': (2, 0, 1, 1), 'rxyz': (2, 1, 0, 1), 'rzyz': (2, 1, 1, 1)}

	_TUPLE2AXES = dict((v, k) for k, v in _AXES2TUPLE.items())

	try:
	    firstaxis, parity, repetition, frame = _AXES2TUPLE[axes.lower()]
	except (AttributeError, KeyError):
	    _ = _TUPLE2AXES[axes]
	    firstaxis, parity, repetition, frame = axes

	i = firstaxis
	j = _NEXT_AXIS[i+parity]
	k = _NEXT_AXIS[i-parity+1]

	if frame:
	    ai, ak = ak, ai
	if parity:
	    aj = -aj

	ai /= 2.0
	aj /= 2.0
	ak /= 2.0
	ci = math.cos(ai)
	si = math.sin(ai)
	cj = math.cos(aj)
	sj = math.sin(aj)
	ck = math.cos(ak)
	sk = math.sin(ak)
	cc = ci*ck
	cs = ci*sk
	sc = si*ck
	ss = si*sk

	quaternion = numpy.empty((4, ), dtype=numpy.float64)
	if repetition:
	    quaternion[i] = cj*(cs + sc)
	    quaternion[j] = sj*(cc + ss)
	    quaternion[k] = sj*(cs - sc)
	    quaternion[3] = cj*(cc - ss)
	else:
	    quaternion[i] = cj*sc - sj*cs
	    quaternion[j] = cj*ss + sj*cc
	    quaternion[k] = cj*cs - sj*sc
	    quaternion[3] = cj*cc + sj*ss
	if parity:
	    quaternion[j] *= -1

	return quaternion

if __name__ == "__main__":


	# 가속도 센서 세팅 #
	adxl345 = ADXL345()
	seq = 0

	# ROS IMU 전달부 세팅 #
	static_transform = rospy.get_param('~static_transform', [0, 0, 0, 0, 0, 0])
	fixed_frame = rospy.get_param('~fixed_frame', "base_footprint")
	frame_name = rospy.get_param('~frame_name', "imu")
	
	rospy.init_node('my_publisher_Imu', anonymous=True)
	pub = rospy.Publisher('/imu', Imu, queue_size=1)
	odomBroadcaster_imu = TransformBroadcaster()
	
	current_time = rospy.get_time()
	last_time = rospy.get_time()

	rate = rospy.Rate(1)



	# 무한루프 #
	while True:

		axes = adxl345.getAxes(True)
		#print ("ADXL345 on address 0x%x:" % (adxl345.address))
		print ("   x = %.3fG" % ( axes['x'] ))
		print ("   y = %.3fG" % ( axes['y'] ))
		print ("   z = %.3fG" % ( axes['z'] ))

		RawX = axes['x'];
		RawY = axes['y'];
		RawZ = axes['z'];

		x = RawX * (  (2 * EARTH_GRAVITY_MS2) / 512);
		y = RawY * (  (2 * EARTH_GRAVITY_MS2) / 512);
		z = RawZ * (  (2 * EARTH_GRAVITY_MS2) / 512);

		roll = (math.atan2(y, math.sqrt(x*x + z*z))*180.0)/MY_PI;
		pitch = (math.atan2(x, math.sqrt(y*y + z*z))*180.0)/MY_PI;
		print ("roll:%.3f, pitch:%.3f" % (roll,pitch))
		# 왼손으로 좌표계 만들고, 손가락 끝을 정면으로 봤을때, 반시계 방향이 + 각도 



		# IMU 토픽 결합 시작 #
		current_time = rospy.get_time()

                quaternion = quaternion_from_euler(
						static_transform[3]*MY_PI/180,
						static_transform[4]*MY_PI/180,
						static_transform[5]*MY_PI/180)

		print ("quaternion1:%.3f, quaternion2:%.3f" % (quaternion[0],quaternion[1]))

		odomBroadcaster_imu.sendTransform(
			(static_transform[0], static_transform[1], static_transform[2]),
			(quaternion[0], quaternion[1], quaternion[2], quaternion[3]),
			rospy.Time.now(), frame_name, fixed_frame)

		imu_msg = Imu()

		imu_msg.linear_acceleration.x = 0.0;
		imu_msg.linear_acceleration.y = 0.0;
		imu_msg.linear_acceleration.z = 9.8;

		imu_msg.angular_velocity.x = 0.0
		imu_msg.angular_velocity.y = 0.0
		imu_msg.angular_velocity.z = 0.0

		quaternion2 = quaternion_from_euler(roll*MY_PI/180 , pitch*MY_PI/180 , 0)
		print ("quaternion2 :%.3f, quaternion2 :%.3f" % (quaternion[0],quaternion[1]))

		imu_msg.orientation.x = quaternion2[0]
		imu_msg.orientation.y = quaternion2[1]
		imu_msg.orientation.z = 0.0
		imu_msg.orientation.w = 0.0

		imu_msg.header.stamp = rospy.Time.now()
		imu_msg.header.frame_id = frame_name
		imu_msg.header.seq = seq
		pub.publish(imu_msg)
		seq += 1
		rate.sleep()
###############################################################################################################################
tracking_frame = "imu",
TRAJECTORY_BUILDER_2D.use_imu_data = true



















//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2. KEYES-345(IMU) + 카토그래퍼 try_2 (성공) // 
# flat world #
https://github.com/googlecartographer/cartographer_turtlebot/blob/master/cartographer_turtlebot/cartographer_turtlebot/flat_world_imu_node_main.cc

map_frame = "map", 
tracking_frame = "imu", 
published_frame = "base_footprint",
odom_frame = "odom",
provide_odom_frame = true,
TRAJECTORY_BUILDER_2D.use_imu_data = true 
###############################################################################################################################
#!/usr/bin/python3

import smbus
import time
import math
import numpy
import rospy
from geometry_msgs.msg import Quaternion, Twist
from tf.broadcaster import TransformBroadcaster
from sensor_msgs.msg import Imu

bus = smbus.SMBus(1)

# ADXL345 device address
ADXL345_DEVICE = 0x53

# ADXL345 constants
EARTH_GRAVITY_MS2   = 9.80665
SCALE_MULTIPLIER    = 0.004

DATA_FORMAT         = 0x31
BW_RATE             = 0x2C
POWER_CTL           = 0x2D

BW_RATE_1600HZ      = 0x0F
BW_RATE_800HZ       = 0x0E
BW_RATE_400HZ       = 0x0D
BW_RATE_200HZ       = 0x0C
BW_RATE_100HZ       = 0x0B
BW_RATE_50HZ        = 0x0A
BW_RATE_25HZ        = 0x09

RANGE_2G            = 0x00
RANGE_4G            = 0x01
RANGE_8G            = 0x02
RANGE_16G           = 0x03

MEASURE             = 0x08
AXES_DATA           = 0x32

MY_PI = 3.14159265358979323846


class ADXL345:

	address = None

	def __init__(self, address = ADXL345_DEVICE):        
		self.address = address
		self.setBandwidthRate(BW_RATE_100HZ)
		self.setRange(RANGE_2G)
		self.enableMeasurement()

	def enableMeasurement(self):
		bus.write_byte_data(self.address, POWER_CTL, MEASURE)

	def setBandwidthRate(self, rate_flag):
		bus.write_byte_data(self.address, BW_RATE, rate_flag)

	def setRange(self, range_flag):
		value = bus.read_byte_data(self.address, DATA_FORMAT)
		value &= ~0x0F;
		value |= range_flag;  
		value |= 0x08;
		bus.write_byte_data(self.address, DATA_FORMAT, value)





    # returns the current reading from the sensor for each axis
    # parameter gforce:
    #    False (default): result is returned in m/s^2
    #    True           : result is returned in gs 
	def getAxes(self, gforce = False):
		bytes = bus.read_i2c_block_data(self.address, AXES_DATA, 6)

		x = bytes[0] | (bytes[1] << 8)
		if(x & (1 << 16 - 1)):
			x = x - (1<<16)

		y = bytes[2] | (bytes[3] << 8)
		if(y & (1 << 16 - 1)):
			y = y - (1<<16)

		z = bytes[4] | (bytes[5] << 8)
		if(z & (1 << 16 - 1)):
			z = z - (1<<16)

		x = x * SCALE_MULTIPLIER 
		y = y * SCALE_MULTIPLIER
		z = z * SCALE_MULTIPLIER

		if gforce == False:
			x = x * EARTH_GRAVITY_MS2
			y = y * EARTH_GRAVITY_MS2
			z = z * EARTH_GRAVITY_MS2

		x = round(x, 4)
		y = round(y, 4)
		z = round(z, 4)

		return {"x": x, "y": y, "z": z}

def quaternion_from_euler(ai, aj, ak, axes='sxyz'):
	"""Return quaternion from Euler angles and axis sequence.
	ai, aj, ak : Euler's roll, pitch and yaw angles
	axes : One of 24 axis sequences as string or encoded tuple

	Source: ROS tf transformations
	https://github.com/ros/geometry        
	"""
	# axis sequences for Euler angles
	_NEXT_AXIS = [1, 2, 0, 1]

	# map axes strings to/from tuples of inner axis, parity, repetition, frame
	_AXES2TUPLE = {
	    'sxyz': (0, 0, 0, 0), 'sxyx': (0, 0, 1, 0), 'sxzy': (0, 1, 0, 0),
	    'sxzx': (0, 1, 1, 0), 'syzx': (1, 0, 0, 0), 'syzy': (1, 0, 1, 0),
	    'syxz': (1, 1, 0, 0), 'syxy': (1, 1, 1, 0), 'szxy': (2, 0, 0, 0),
	    'szxz': (2, 0, 1, 0), 'szyx': (2, 1, 0, 0), 'szyz': (2, 1, 1, 0),
	    'rzyx': (0, 0, 0, 1), 'rxyx': (0, 0, 1, 1), 'ryzx': (0, 1, 0, 1),
	    'rxzx': (0, 1, 1, 1), 'rxzy': (1, 0, 0, 1), 'ryzy': (1, 0, 1, 1),
	    'rzxy': (1, 1, 0, 1), 'ryxy': (1, 1, 1, 1), 'ryxz': (2, 0, 0, 1),
	    'rzxz': (2, 0, 1, 1), 'rxyz': (2, 1, 0, 1), 'rzyz': (2, 1, 1, 1)}

	_TUPLE2AXES = dict((v, k) for k, v in _AXES2TUPLE.items())

	try:
	    firstaxis, parity, repetition, frame = _AXES2TUPLE[axes.lower()]
	except (AttributeError, KeyError):
	    _ = _TUPLE2AXES[axes]
	    firstaxis, parity, repetition, frame = axes

	i = firstaxis
	j = _NEXT_AXIS[i+parity]
	k = _NEXT_AXIS[i-parity+1]

	if frame:
	    ai, ak = ak, ai
	if parity:
	    aj = -aj

	ai /= 2.0
	aj /= 2.0
	ak /= 2.0
	ci = math.cos(ai)
	si = math.sin(ai)
	cj = math.cos(aj)
	sj = math.sin(aj)
	ck = math.cos(ak)
	sk = math.sin(ak)
	cc = ci*ck
	cs = ci*sk
	sc = si*ck
	ss = si*sk

	quaternion = numpy.empty((4, ), dtype=numpy.float64)
	if repetition:
	    quaternion[i] = cj*(cs + sc)
	    quaternion[j] = sj*(cc + ss)
	    quaternion[k] = sj*(cs - sc)
	    quaternion[3] = cj*(cc - ss)
	else:
	    quaternion[i] = cj*sc - sj*cs
	    quaternion[j] = cj*ss + sj*cc
	    quaternion[k] = cj*cs - sj*sc
	    quaternion[3] = cj*cc + sj*ss
	if parity:
	    quaternion[j] *= -1

	return quaternion


if __name__ == "__main__":


	# 가속도 센서 세팅 #
	adxl345 = ADXL345()
	seq = 0

	# ROS IMU 전달부 세팅 #
	static_transform = rospy.get_param('~static_transform', [0, 0, 0, 0, 0, 0])
	fixed_frame = rospy.get_param('~fixed_frame', "base_footprint")
	frame_name = rospy.get_param('~frame_name', "imu")
	
	rospy.init_node('my_publisher_Imu', anonymous=True)
	pub = rospy.Publisher('/imu', Imu, queue_size=1)
	odomBroadcaster_imu = TransformBroadcaster()
	
	current_time = rospy.get_time()
	last_time = rospy.get_time()

	rate = rospy.Rate(1)

	# 무한루프 #
	# while true로 하면 control c로 안꺼진다. #
	while not rospy.is_shutdown():

		axes = adxl345.getAxes(True)
		#print ("ADXL345 on address 0x%x:" % (adxl345.address))
		print ("   x = %.3fG" % ( axes['x'] ))
		print ("   y = %.3fG" % ( axes['y'] ))
		print ("   z = %.3fG" % ( axes['z'] ))

		RawX = axes['x'];
		RawY = axes['y'];
		RawZ = axes['z'];

		x = RawX * (  (2 * EARTH_GRAVITY_MS2) / 512);
		y = RawY * (  (2 * EARTH_GRAVITY_MS2) / 512);
		z = RawZ * (  (2 * EARTH_GRAVITY_MS2) / 512);

		roll = (math.atan2(y, math.sqrt(x*x + z*z))*180.0)/MY_PI;
		pitch = (math.atan2(x, math.sqrt(y*y + z*z))*180.0)/MY_PI;
		print ("roll:%.3f, pitch:%.3f" % (roll,pitch))
		# 왼손으로 좌표계 만들고, 몸 안쪽으로 손목을 접고
		# 엄지, 검지, 중지 어떤 손가락을 선택하더라도 손가락 끝을 미간을 향하게 하면
		# 반시계 방향이 + 이다. ( adxl345 기준 )



		# IMU 토픽 결합 시작 #
		current_time = rospy.get_time()

		# 실험을 위해서 X축(roll)을 사용해서 yaw값을 만든다. #
                quaternion = quaternion_from_euler(0, 0, roll*MY_PI/180)

		odomBroadcaster_imu.sendTransform(
			(static_transform[0], static_transform[1], static_transform[2]),
			(quaternion[0], quaternion[1], quaternion[2], quaternion[3]),
			rospy.Time.now(), frame_name, fixed_frame)

		imu_msg = Imu()

		imu_msg.linear_acceleration.x = 0.0;
		imu_msg.linear_acceleration.y = 0.0;
		imu_msg.linear_acceleration.z = 9.8;

		imu_msg.angular_velocity.x = 0.0
		imu_msg.angular_velocity.y = 0.0
		imu_msg.angular_velocity.z = 0.0

		quaternion2 = quaternion_from_euler(0 , 0 , roll*MY_PI/180)
		imu_msg.orientation.x = 0.0
		imu_msg.orientation.y = 0.0
		imu_msg.orientation.z = quaternion2[2]
		imu_msg.orientation.w = 0.0

		imu_msg.header.stamp = rospy.Time.now()
		imu_msg.header.frame_id = frame_name
		imu_msg.header.seq = seq
		pub.publish(imu_msg)
		seq += 1
		rate.sleep()
###############################################################################################################################

