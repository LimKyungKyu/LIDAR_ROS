// 1. 직접 Python 패키지와 노드 만들기 //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1-1-1. ( 기본 msg 파일 활용 : 문자 )
https://htsstory.tistory.com/entry/ROS-python%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-1-%ED%86%A0%ED%94%BD-%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%86%B5%EC%8B%A0

std_msgs.msg의 String 을 사용해서 진행한다.

cd && mkdir -p my_python_test/src && cd my_python_test/src
catkin_create_pkg my_python_package std_msgs rospy

cd ~/my_python_test/src/my_python_package && vi package.xml
비슷한 위치에 아래 내용 추가
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>


1-1-2. Publisher 작성
cd && cd ~/my_python_test/src/my_python_package/src && vi my_python_msg_publisher.py
############################################################
#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def talker():
	pub = rospy.Publisher('python_topic',String,queue_size=10)
	rospy.init_node('my_publisher_node', anonymous=True)
	rate = rospy.Rate(1)
	while not rospy.is_shutdown():
		hello_str = "hello world"
		rospy.loginfo(hello_str)
		pub.publish(hello_str)
		rate.sleep()

if __name__=='__main__':
	try:
		talker()
	except rospy.ROSInterruptException:
		pass
############################################################
토픽명은 python_topic 이고 노드명은 my_publisher_node이다.


1-1-3.Subscriber 작성
vi my_python_msg_subscriber.py
############################################################
#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
	rospy.loginfo("I heard %s", data.data)

def listener():
	rospy.init_node('my_subscriber_node', anonymous=True)
	rospy.Subscriber('python_topic', String, callback)
	rospy.spin()

if __name__=='__main__':
	listener()
############################################################
토픽명은 python_topic 이고 노드명은 my_subscriber_node이다.


1-1-4. 빌드
chmod +x my_python_msg_subscriber.py my_python_msg_publisher.py
cd ~/my_python_test && catkin_make
echo "source ~/my_python_test/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc (source ~/.bashrc만 모든 터미널에서 수행한다.)

roscore # 터미널 1 #
rosrun my_python_package my_python_msg_publisher.py # 터미널 2 #
rosrun my_python_package my_python_msg_subscriber.py # 터미널 3 #

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1-2-1. ( 사용자 msg 파일 활용, 숫자 )

cd my_python_package && mkdir msg && cd msg && vi my_msg_setting_python.msg
int32 num

cd && cd my_python_test/src/my_python_package && vi CMakeLists.txt

find_package(catkin REQUIRED COMPONENTS
  rospy
  std_msgs
  message_generation
)

 add_message_files(
   FILES
   my_msg_setting_python.msg
 )

 generate_messages(
   DEPENDENCIES
   std_msgs
 )

catkin_package(
#  INCLUDE_DIRS include
   LIBRARIES my_python_package
   CATKIN_DEPENDS rospy std_msgs message_runtime
#  DEPENDS system_lib
)

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
)


1-2-2. Publisher 작성
cd && cd my_python_test/src/my_python_package/src && vi my_python_msg_publisher.py
############################################################
#!/usr/bin/env python

import rospy
from my_python_package.msg import my_msg_setting_python

def talker():
	pub = rospy.Publisher('python_topic', my_msg_setting_python, queue_size=10)
	rospy.init_node('my_publisher_node', anonymous=True)
	rate = rospy.Rate(1)
	count = 1
	while not rospy.is_shutdown():
		pub.publish(count)
		rospy.loginfo(count)
		count += 1
		rate.sleep()

if __name__=='__main__':
	try:
		talker()
	except rospy.ROSInterruptException:
		pass
############################################################


1-2-3. Subscriber 작성
cd && cd my_python_test/src/my_python_package/src && vi my_python_msg_subscriber.py
############################################################
#!/usr/bin/env python

import rospy
from my_python_package.msg import my_msg_setting_python

def callback(data):
	rospy.loginfo("I heard %d", data.num)

def listener():
	rospy.init_node('my_subscriber_node', anonymous=True)
	rospy.Subscriber('python_topic', my_msg_setting_python, callback)
	rospy.spin()

if __name__=='__main__':
	listener()
############################################################


1-2-4. 빌드
cd ~/my_python_test && catkin_make
roscore # 터미널 1 #
rosrun my_python_package my_python_msg_publisher.py # 터미널 2 #
rosrun my_python_package my_python_msg_subscriber.py # 터미널 3 #
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////















// 2. cpp Publisher의 값을 python Subscriber로 받기 //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-1. ( 기본 msg 파일, 숫자 )

cd && cd my_python_test/src/my_python_package/src && vi my_python_msg_subscriber.py
############################################################
#!/usr/bin/env python

import rospy
from std_msgs.msg import Int32

def callback(data):
	rospy.loginfo("I heard %d", data.data)

def listener():
	rospy.init_node('my_subscriber_node',anonymous=True)

	rospy.Subscriber("my_package_msg", Int32, callback)

	rospy.spin()

if __name__=='__main__':
	listener()
############################################################

roscore # 터미널 1 #
rosrun my_test_package my_msg_publisher # 터미널 2 #
rosrun my_python_package my_python_msg_subscriber.py # 터미널 3 #

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2-2. ( 사용자 msg 파일, 숫자 ) #다른 데이터 추가#

my_msg_setting.msg의 내용을 아래처럼 수정한다.
cd ~/my_cpp_test/src/my_cpp_package/msg && vi my_msg_setting.msg
int32 data
time stamp

my_cpp_publisher.cpp의 내용을 수정한다.
cd ~/my_cpp_test/src/my_cpp_package/src && vi my_cpp_publisher.cpp
############################################################
#include "ros/ros.h"
#include "my_cpp_package/my_msg_setting.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "my_publisher_node");
  ros::NodeHandle nh;
  ros::Publisher my_cpp_pub = nh.advertise<my_cpp_package::my_msg_setting>("my_package_msg", 100);
  ros::Rate loop_rate(1);
  int count = 0;

  while (ros::ok())
  {
    my_cpp_package::my_msg_setting msg;
    msg.data = count;
    msg.stamp = ros::Time::now(); 
    ROS_INFO("send msg = %d", count);
    ROS_INFO("send msg = %d", ros::Time::now());
    my_cpp_pub.publish(msg); 
    loop_rate.sleep();
    ++count;
  }
  return 0;
}
############################################################

이때 cpp에서 사용한 my_msg_setting.msg파일을 my_python_package의 msg폴더로 복사한다.
CMakeList.txt를 아래와 같이 수정한다.
cd && cd my_python_test/src/my_python_package && vi CMakeLists.txt
 add_message_files(
   FILES
   my_msg_setting_python.msg
   my_msg_setting.msg
 )

cd && cd my_python_test/src/my_python_package/src && vi my_python_msg_subscriber.py
############################################################
#!/usr/bin/env python

import rospy
from my_python_package.msg import my_msg_setting

def callback(data):
	rospy.loginfo("I heard %d", data.data)
	rospy.loginfo(data.stamp)

def listener():
	rospy.init_node('my_subscriber_node',anonymous=True)
	rospy.Subscriber('my_package_msg', my_msg_setting, callback)
	rospy.spin()

if __name__=='__main__':
	listener()
############################################################

cd ~/my_python_test && catkin_make && cd ~/my_cpp_test && catkin_make
터미널 모두 종료하고 다시 시작
roscore # 터미널 1 #
rosrun my_cpp_package my_cpp_publisher # 터미널 2 #
rosrun my_python_package my_python_msg_subscriber.py # 터미널 3 #
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





참고
.py 이므로 그냥 바탕화면의 아무곳에서나 만들어도 roscore와 연동은 된다.

rospy에서 불러올수 있는 함수들이 많이 있다.
rospy.get_caller_id()
rospy.get_time()

echo $PYTHONPATH 환경 변수를 추가해서 쉽게 import 할수도 있다.
export PYTHONPATH="${PYTHONPATH}:/home/nvidia/my_python_test/src/my_python_packag/msg"

문자를 주고받으려면 cpp의 Publisher를 string으로 발생시키도록 코드를 수정하고
python의 subscriber를 String으로 받도록 코드를 수정하면 된다.
